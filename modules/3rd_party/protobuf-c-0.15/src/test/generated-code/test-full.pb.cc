// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test-full.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace foo {

namespace {

const ::google::protobuf::Descriptor* SubMess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubMess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo15_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo15_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo16_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo2047_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo2047_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo2048_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo2048_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo262143_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo262143_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo262144_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo262144_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo33554431_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo33554431_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestFieldNo33554432_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestFieldNo33554432_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessPacked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessPacked_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessOptional_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessOptional_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredSInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredSInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredSFixed32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredSFixed32_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredSInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredSInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredSFixed64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredSFixed64_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredUInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredUInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredFixed32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredFixed32_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredUInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredUInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredFixed64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredFixed64_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredEnum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredEnum_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredEnumSmall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredEnumSmall_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredString_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredBytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessRequiredMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessRequiredMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyMess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMess_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefaultRequiredValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultRequiredValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefaultOptionalValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultOptionalValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocValues_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestEnumSmall_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TestEnumDupValues_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2dfull_2eproto() {
  protobuf_AddDesc_test_2dfull_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test-full.proto");
  GOOGLE_CHECK(file != NULL);
  SubMess_descriptor_ = file->message_type(0);
  static const int SubMess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMess, test_),
  };
  SubMess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubMess_descriptor_,
      SubMess::default_instance_,
      SubMess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubMess));
  TestFieldNo15_descriptor_ = file->message_type(1);
  static const int TestFieldNo15_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo15, test_),
  };
  TestFieldNo15_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo15_descriptor_,
      TestFieldNo15::default_instance_,
      TestFieldNo15_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo15, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo15, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo15));
  TestFieldNo16_descriptor_ = file->message_type(2);
  static const int TestFieldNo16_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo16, test_),
  };
  TestFieldNo16_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo16_descriptor_,
      TestFieldNo16::default_instance_,
      TestFieldNo16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo16, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo16, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo16));
  TestFieldNo2047_descriptor_ = file->message_type(3);
  static const int TestFieldNo2047_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo2047, test_),
  };
  TestFieldNo2047_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo2047_descriptor_,
      TestFieldNo2047::default_instance_,
      TestFieldNo2047_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo2047, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo2047, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo2047));
  TestFieldNo2048_descriptor_ = file->message_type(4);
  static const int TestFieldNo2048_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo2048, test_),
  };
  TestFieldNo2048_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo2048_descriptor_,
      TestFieldNo2048::default_instance_,
      TestFieldNo2048_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo2048, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo2048, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo2048));
  TestFieldNo262143_descriptor_ = file->message_type(5);
  static const int TestFieldNo262143_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo262143, test_),
  };
  TestFieldNo262143_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo262143_descriptor_,
      TestFieldNo262143::default_instance_,
      TestFieldNo262143_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo262143, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo262143, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo262143));
  TestFieldNo262144_descriptor_ = file->message_type(6);
  static const int TestFieldNo262144_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo262144, test_),
  };
  TestFieldNo262144_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo262144_descriptor_,
      TestFieldNo262144::default_instance_,
      TestFieldNo262144_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo262144, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo262144, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo262144));
  TestFieldNo33554431_descriptor_ = file->message_type(7);
  static const int TestFieldNo33554431_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo33554431, test_),
  };
  TestFieldNo33554431_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo33554431_descriptor_,
      TestFieldNo33554431::default_instance_,
      TestFieldNo33554431_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo33554431, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo33554431, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo33554431));
  TestFieldNo33554432_descriptor_ = file->message_type(8);
  static const int TestFieldNo33554432_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo33554432, test_),
  };
  TestFieldNo33554432_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestFieldNo33554432_descriptor_,
      TestFieldNo33554432::default_instance_,
      TestFieldNo33554432_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo33554432, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestFieldNo33554432, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestFieldNo33554432));
  TestMess_descriptor_ = file->message_type(9);
  static const int TestMess_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_sfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_sfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_fixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_fixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_enum_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, test_message_),
  };
  TestMess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMess_descriptor_,
      TestMess::default_instance_,
      TestMess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMess));
  TestMessPacked_descriptor_ = file->message_type(10);
  static const int TestMessPacked_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_sfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_sfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_fixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_fixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_enum_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, test_enum_),
  };
  TestMessPacked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessPacked_descriptor_,
      TestMessPacked::default_instance_,
      TestMessPacked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessPacked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessPacked));
  TestMessOptional_descriptor_ = file->message_type(11);
  static const int TestMessOptional_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_sfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_sfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_fixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_fixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_enum_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, test_message_),
  };
  TestMessOptional_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessOptional_descriptor_,
      TestMessOptional::default_instance_,
      TestMessOptional_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessOptional, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessOptional));
  TestMessRequiredInt32_descriptor_ = file->message_type(12);
  static const int TestMessRequiredInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredInt32, test_),
  };
  TestMessRequiredInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredInt32_descriptor_,
      TestMessRequiredInt32::default_instance_,
      TestMessRequiredInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredInt32));
  TestMessRequiredSInt32_descriptor_ = file->message_type(13);
  static const int TestMessRequiredSInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSInt32, test_),
  };
  TestMessRequiredSInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredSInt32_descriptor_,
      TestMessRequiredSInt32::default_instance_,
      TestMessRequiredSInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredSInt32));
  TestMessRequiredSFixed32_descriptor_ = file->message_type(14);
  static const int TestMessRequiredSFixed32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSFixed32, test_),
  };
  TestMessRequiredSFixed32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredSFixed32_descriptor_,
      TestMessRequiredSFixed32::default_instance_,
      TestMessRequiredSFixed32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSFixed32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSFixed32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredSFixed32));
  TestMessRequiredInt64_descriptor_ = file->message_type(15);
  static const int TestMessRequiredInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredInt64, test_),
  };
  TestMessRequiredInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredInt64_descriptor_,
      TestMessRequiredInt64::default_instance_,
      TestMessRequiredInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredInt64));
  TestMessRequiredSInt64_descriptor_ = file->message_type(16);
  static const int TestMessRequiredSInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSInt64, test_),
  };
  TestMessRequiredSInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredSInt64_descriptor_,
      TestMessRequiredSInt64::default_instance_,
      TestMessRequiredSInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredSInt64));
  TestMessRequiredSFixed64_descriptor_ = file->message_type(17);
  static const int TestMessRequiredSFixed64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSFixed64, test_),
  };
  TestMessRequiredSFixed64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredSFixed64_descriptor_,
      TestMessRequiredSFixed64::default_instance_,
      TestMessRequiredSFixed64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSFixed64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredSFixed64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredSFixed64));
  TestMessRequiredUInt32_descriptor_ = file->message_type(18);
  static const int TestMessRequiredUInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredUInt32, test_),
  };
  TestMessRequiredUInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredUInt32_descriptor_,
      TestMessRequiredUInt32::default_instance_,
      TestMessRequiredUInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredUInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredUInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredUInt32));
  TestMessRequiredFixed32_descriptor_ = file->message_type(19);
  static const int TestMessRequiredFixed32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFixed32, test_),
  };
  TestMessRequiredFixed32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredFixed32_descriptor_,
      TestMessRequiredFixed32::default_instance_,
      TestMessRequiredFixed32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFixed32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFixed32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredFixed32));
  TestMessRequiredUInt64_descriptor_ = file->message_type(20);
  static const int TestMessRequiredUInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredUInt64, test_),
  };
  TestMessRequiredUInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredUInt64_descriptor_,
      TestMessRequiredUInt64::default_instance_,
      TestMessRequiredUInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredUInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredUInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredUInt64));
  TestMessRequiredFixed64_descriptor_ = file->message_type(21);
  static const int TestMessRequiredFixed64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFixed64, test_),
  };
  TestMessRequiredFixed64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredFixed64_descriptor_,
      TestMessRequiredFixed64::default_instance_,
      TestMessRequiredFixed64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFixed64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFixed64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredFixed64));
  TestMessRequiredFloat_descriptor_ = file->message_type(22);
  static const int TestMessRequiredFloat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFloat, test_),
  };
  TestMessRequiredFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredFloat_descriptor_,
      TestMessRequiredFloat::default_instance_,
      TestMessRequiredFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredFloat));
  TestMessRequiredDouble_descriptor_ = file->message_type(23);
  static const int TestMessRequiredDouble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredDouble, test_),
  };
  TestMessRequiredDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredDouble_descriptor_,
      TestMessRequiredDouble::default_instance_,
      TestMessRequiredDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredDouble));
  TestMessRequiredBool_descriptor_ = file->message_type(24);
  static const int TestMessRequiredBool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredBool, test_),
  };
  TestMessRequiredBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredBool_descriptor_,
      TestMessRequiredBool::default_instance_,
      TestMessRequiredBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredBool));
  TestMessRequiredEnum_descriptor_ = file->message_type(25);
  static const int TestMessRequiredEnum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredEnum, test_),
  };
  TestMessRequiredEnum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredEnum_descriptor_,
      TestMessRequiredEnum::default_instance_,
      TestMessRequiredEnum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredEnum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredEnum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredEnum));
  TestMessRequiredEnumSmall_descriptor_ = file->message_type(26);
  static const int TestMessRequiredEnumSmall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredEnumSmall, test_),
  };
  TestMessRequiredEnumSmall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredEnumSmall_descriptor_,
      TestMessRequiredEnumSmall::default_instance_,
      TestMessRequiredEnumSmall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredEnumSmall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredEnumSmall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredEnumSmall));
  TestMessRequiredString_descriptor_ = file->message_type(27);
  static const int TestMessRequiredString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredString, test_),
  };
  TestMessRequiredString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredString_descriptor_,
      TestMessRequiredString::default_instance_,
      TestMessRequiredString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredString));
  TestMessRequiredBytes_descriptor_ = file->message_type(28);
  static const int TestMessRequiredBytes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredBytes, test_),
  };
  TestMessRequiredBytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredBytes_descriptor_,
      TestMessRequiredBytes::default_instance_,
      TestMessRequiredBytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredBytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredBytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredBytes));
  TestMessRequiredMessage_descriptor_ = file->message_type(29);
  static const int TestMessRequiredMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredMessage, test_),
  };
  TestMessRequiredMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessRequiredMessage_descriptor_,
      TestMessRequiredMessage::default_instance_,
      TestMessRequiredMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessRequiredMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessRequiredMessage));
  EmptyMess_descriptor_ = file->message_type(30);
  static const int EmptyMess_offsets_[1] = {
  };
  EmptyMess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMess_descriptor_,
      EmptyMess::default_instance_,
      EmptyMess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMess));
  DefaultRequiredValues_descriptor_ = file->message_type(31);
  static const int DefaultRequiredValues_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, v_bytes_),
  };
  DefaultRequiredValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultRequiredValues_descriptor_,
      DefaultRequiredValues::default_instance_,
      DefaultRequiredValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequiredValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultRequiredValues));
  DefaultOptionalValues_descriptor_ = file->message_type(32);
  static const int DefaultOptionalValues_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, v_bytes_),
  };
  DefaultOptionalValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultOptionalValues_descriptor_,
      DefaultOptionalValues::default_instance_,
      DefaultOptionalValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultOptionalValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultOptionalValues));
  AllocValues_descriptor_ = file->message_type(33);
  static const int AllocValues_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, o_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, r_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, a_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, a_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, a_mess_),
  };
  AllocValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocValues_descriptor_,
      AllocValues::default_instance_,
      AllocValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocValues));
  TestEnumSmall_descriptor_ = file->enum_type(0);
  TestEnum_descriptor_ = file->enum_type(1);
  TestEnumDupValues_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2dfull_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubMess_descriptor_, &SubMess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo15_descriptor_, &TestFieldNo15::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo16_descriptor_, &TestFieldNo16::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo2047_descriptor_, &TestFieldNo2047::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo2048_descriptor_, &TestFieldNo2048::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo262143_descriptor_, &TestFieldNo262143::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo262144_descriptor_, &TestFieldNo262144::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo33554431_descriptor_, &TestFieldNo33554431::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestFieldNo33554432_descriptor_, &TestFieldNo33554432::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMess_descriptor_, &TestMess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessPacked_descriptor_, &TestMessPacked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessOptional_descriptor_, &TestMessOptional::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredInt32_descriptor_, &TestMessRequiredInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredSInt32_descriptor_, &TestMessRequiredSInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredSFixed32_descriptor_, &TestMessRequiredSFixed32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredInt64_descriptor_, &TestMessRequiredInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredSInt64_descriptor_, &TestMessRequiredSInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredSFixed64_descriptor_, &TestMessRequiredSFixed64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredUInt32_descriptor_, &TestMessRequiredUInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredFixed32_descriptor_, &TestMessRequiredFixed32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredUInt64_descriptor_, &TestMessRequiredUInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredFixed64_descriptor_, &TestMessRequiredFixed64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredFloat_descriptor_, &TestMessRequiredFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredDouble_descriptor_, &TestMessRequiredDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredBool_descriptor_, &TestMessRequiredBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredEnum_descriptor_, &TestMessRequiredEnum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredEnumSmall_descriptor_, &TestMessRequiredEnumSmall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredString_descriptor_, &TestMessRequiredString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredBytes_descriptor_, &TestMessRequiredBytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessRequiredMessage_descriptor_, &TestMessRequiredMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMess_descriptor_, &EmptyMess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultRequiredValues_descriptor_, &DefaultRequiredValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultOptionalValues_descriptor_, &DefaultOptionalValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocValues_descriptor_, &AllocValues::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2dfull_2eproto() {
  delete SubMess::default_instance_;
  delete SubMess_reflection_;
  delete TestFieldNo15::default_instance_;
  delete TestFieldNo15_reflection_;
  delete TestFieldNo16::default_instance_;
  delete TestFieldNo16_reflection_;
  delete TestFieldNo2047::default_instance_;
  delete TestFieldNo2047_reflection_;
  delete TestFieldNo2048::default_instance_;
  delete TestFieldNo2048_reflection_;
  delete TestFieldNo262143::default_instance_;
  delete TestFieldNo262143_reflection_;
  delete TestFieldNo262144::default_instance_;
  delete TestFieldNo262144_reflection_;
  delete TestFieldNo33554431::default_instance_;
  delete TestFieldNo33554431_reflection_;
  delete TestFieldNo33554432::default_instance_;
  delete TestFieldNo33554432_reflection_;
  delete TestMess::default_instance_;
  delete TestMess_reflection_;
  delete TestMessPacked::default_instance_;
  delete TestMessPacked_reflection_;
  delete TestMessOptional::default_instance_;
  delete TestMessOptional_reflection_;
  delete TestMessRequiredInt32::default_instance_;
  delete TestMessRequiredInt32_reflection_;
  delete TestMessRequiredSInt32::default_instance_;
  delete TestMessRequiredSInt32_reflection_;
  delete TestMessRequiredSFixed32::default_instance_;
  delete TestMessRequiredSFixed32_reflection_;
  delete TestMessRequiredInt64::default_instance_;
  delete TestMessRequiredInt64_reflection_;
  delete TestMessRequiredSInt64::default_instance_;
  delete TestMessRequiredSInt64_reflection_;
  delete TestMessRequiredSFixed64::default_instance_;
  delete TestMessRequiredSFixed64_reflection_;
  delete TestMessRequiredUInt32::default_instance_;
  delete TestMessRequiredUInt32_reflection_;
  delete TestMessRequiredFixed32::default_instance_;
  delete TestMessRequiredFixed32_reflection_;
  delete TestMessRequiredUInt64::default_instance_;
  delete TestMessRequiredUInt64_reflection_;
  delete TestMessRequiredFixed64::default_instance_;
  delete TestMessRequiredFixed64_reflection_;
  delete TestMessRequiredFloat::default_instance_;
  delete TestMessRequiredFloat_reflection_;
  delete TestMessRequiredDouble::default_instance_;
  delete TestMessRequiredDouble_reflection_;
  delete TestMessRequiredBool::default_instance_;
  delete TestMessRequiredBool_reflection_;
  delete TestMessRequiredEnum::default_instance_;
  delete TestMessRequiredEnum_reflection_;
  delete TestMessRequiredEnumSmall::default_instance_;
  delete TestMessRequiredEnumSmall_reflection_;
  delete TestMessRequiredString::default_instance_;
  delete TestMessRequiredString_reflection_;
  delete TestMessRequiredBytes::default_instance_;
  delete TestMessRequiredBytes_reflection_;
  delete TestMessRequiredMessage::default_instance_;
  delete TestMessRequiredMessage_reflection_;
  delete EmptyMess::default_instance_;
  delete EmptyMess_reflection_;
  delete DefaultRequiredValues::default_instance_;
  delete DefaultRequiredValues_reflection_;
  delete DefaultOptionalValues::default_instance_;
  delete DefaultOptionalValues_reflection_;
  delete AllocValues::default_instance_;
  delete AllocValues_reflection_;
}

void protobuf_AddDesc_test_2dfull_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017test-full.proto\022\003foo\"\027\n\007SubMess\022\014\n\004tes"
    "t\030\004 \002(\005\"\035\n\rTestFieldNo15\022\014\n\004test\030\017 \002(\t\"\035"
    "\n\rTestFieldNo16\022\014\n\004test\030\020 \002(\t\" \n\017TestFie"
    "ldNo2047\022\r\n\004test\030\377\017 \002(\t\" \n\017TestFieldNo20"
    "48\022\r\n\004test\030\200\020 \002(\t\"#\n\021TestFieldNo262143\022\016"
    "\n\004test\030\377\377\017 \002(\t\"#\n\021TestFieldNo262144\022\016\n\004t"
    "est\030\200\200\020 \002(\t\"&\n\023TestFieldNo33554431\022\017\n\004te"
    "st\030\377\377\377\017 \002(\t\"&\n\023TestFieldNo33554432\022\017\n\004te"
    "st\030\200\200\200\020 \002(\t\"\273\003\n\010TestMess\022\022\n\ntest_int32\030\001"
    " \003(\005\022\023\n\013test_sint32\030\002 \003(\021\022\025\n\rtest_sfixed"
    "32\030\003 \003(\017\022\022\n\ntest_int64\030\004 \003(\003\022\023\n\013test_sin"
    "t64\030\005 \003(\022\022\025\n\rtest_sfixed64\030\006 \003(\020\022\023\n\013test"
    "_uint32\030\007 \003(\r\022\024\n\014test_fixed32\030\010 \003(\007\022\023\n\013t"
    "est_uint64\030\t \003(\004\022\024\n\014test_fixed64\030\n \003(\006\022\022"
    "\n\ntest_float\030\013 \003(\002\022\023\n\013test_double\030\014 \003(\001\022"
    "\024\n\014test_boolean\030\r \003(\010\022+\n\017test_enum_small"
    "\030\016 \003(\0162\022.foo.TestEnumSmall\022 \n\ttest_enum\030"
    "\017 \003(\0162\r.foo.TestEnum\022\023\n\013test_string\030\020 \003("
    "\t\022\022\n\ntest_bytes\030\021 \003(\014\022\"\n\014test_message\030\022 "
    "\003(\0132\014.foo.SubMess\"\260\003\n\016TestMessPacked\022\026\n\n"
    "test_int32\030\001 \003(\005B\002\020\001\022\027\n\013test_sint32\030\002 \003("
    "\021B\002\020\001\022\031\n\rtest_sfixed32\030\003 \003(\017B\002\020\001\022\026\n\ntest"
    "_int64\030\004 \003(\003B\002\020\001\022\027\n\013test_sint64\030\005 \003(\022B\002\020"
    "\001\022\031\n\rtest_sfixed64\030\006 \003(\020B\002\020\001\022\027\n\013test_uin"
    "t32\030\007 \003(\rB\002\020\001\022\030\n\014test_fixed32\030\010 \003(\007B\002\020\001\022"
    "\027\n\013test_uint64\030\t \003(\004B\002\020\001\022\030\n\014test_fixed64"
    "\030\n \003(\006B\002\020\001\022\026\n\ntest_float\030\013 \003(\002B\002\020\001\022\027\n\013te"
    "st_double\030\014 \003(\001B\002\020\001\022\030\n\014test_boolean\030\r \003("
    "\010B\002\020\001\022/\n\017test_enum_small\030\016 \003(\0162\022.foo.Tes"
    "tEnumSmallB\002\020\001\022$\n\ttest_enum\030\017 \003(\0162\r.foo."
    "TestEnumB\002\020\001\"\303\003\n\020TestMessOptional\022\022\n\ntes"
    "t_int32\030\001 \001(\005\022\023\n\013test_sint32\030\002 \001(\021\022\025\n\rte"
    "st_sfixed32\030\003 \001(\017\022\022\n\ntest_int64\030\004 \001(\003\022\023\n"
    "\013test_sint64\030\005 \001(\022\022\025\n\rtest_sfixed64\030\006 \001("
    "\020\022\023\n\013test_uint32\030\007 \001(\r\022\024\n\014test_fixed32\030\010"
    " \001(\007\022\023\n\013test_uint64\030\t \001(\004\022\024\n\014test_fixed6"
    "4\030\n \001(\006\022\022\n\ntest_float\030\013 \001(\002\022\023\n\013test_doub"
    "le\030\014 \001(\001\022\024\n\014test_boolean\030\r \001(\010\022+\n\017test_e"
    "num_small\030\016 \001(\0162\022.foo.TestEnumSmall\022 \n\tt"
    "est_enum\030\017 \001(\0162\r.foo.TestEnum\022\023\n\013test_st"
    "ring\030\020 \001(\t\022\022\n\ntest_bytes\030\021 \001(\014\022\"\n\014test_m"
    "essage\030\022 \001(\0132\014.foo.SubMess\"%\n\025TestMessRe"
    "quiredInt32\022\014\n\004test\030* \002(\005\"&\n\026TestMessReq"
    "uiredSInt32\022\014\n\004test\030+ \002(\021\"(\n\030TestMessReq"
    "uiredSFixed32\022\014\n\004test\030d \002(\017\"%\n\025TestMessR"
    "equiredInt64\022\014\n\004test\030\001 \002(\003\"&\n\026TestMessRe"
    "quiredSInt64\022\014\n\004test\030\013 \002(\022\"(\n\030TestMessRe"
    "quiredSFixed64\022\014\n\004test\030\014 \002(\020\"&\n\026TestMess"
    "RequiredUInt32\022\014\n\004test\030\001 \002(\r\"\'\n\027TestMess"
    "RequiredFixed32\022\014\n\004test\030\001 \002(\007\"&\n\026TestMes"
    "sRequiredUInt64\022\014\n\004test\030\001 \002(\004\"\'\n\027TestMes"
    "sRequiredFixed64\022\014\n\004test\030\001 \002(\006\"%\n\025TestMe"
    "ssRequiredFloat\022\014\n\004test\030\001 \002(\002\"&\n\026TestMes"
    "sRequiredDouble\022\014\n\004test\030\001 \002(\001\"$\n\024TestMes"
    "sRequiredBool\022\014\n\004test\030\001 \002(\010\"3\n\024TestMessR"
    "equiredEnum\022\033\n\004test\030\001 \002(\0162\r.foo.TestEnum"
    "\"=\n\031TestMessRequiredEnumSmall\022 \n\004test\030\001 "
    "\002(\0162\022.foo.TestEnumSmall\"&\n\026TestMessRequi"
    "redString\022\014\n\004test\030\001 \002(\t\"%\n\025TestMessRequi"
    "redBytes\022\014\n\004test\030\001 \002(\014\"5\n\027TestMessRequir"
    "edMessage\022\032\n\004test\030\001 \002(\0132\014.foo.SubMess\"\013\n"
    "\tEmptyMess\"\342\001\n\025DefaultRequiredValues\022\024\n\007"
    "v_int32\030\001 \002(\005:\003-42\022\025\n\010v_uint32\030\002 \002(\r:\00366"
    "6\022\027\n\007v_int64\030\003 \002(\005:\006100000\022\030\n\010v_uint64\030\004"
    " \002(\r:\006100001\022\024\n\007v_float\030\005 \002(\002:\0032.5\022\025\n\010v_"
    "double\030\006 \002(\001:\0034.5\022\031\n\010v_string\030\007 \002(\t:\007hi "
    "mom\n\022!\n\007v_bytes\030\010 \002(\014:\020a \\000 character\""
    "\342\001\n\025DefaultOptionalValues\022\024\n\007v_int32\030\001 \001"
    "(\005:\003-42\022\025\n\010v_uint32\030\002 \001(\r:\003666\022\027\n\007v_int6"
    "4\030\003 \001(\005:\006100000\022\030\n\010v_uint64\030\004 \001(\r:\00610000"
    "1\022\024\n\007v_float\030\005 \001(\002:\0032.5\022\025\n\010v_double\030\006 \001("
    "\001:\0034.5\022\031\n\010v_string\030\007 \001(\t:\007hi mom\n\022!\n\007v_b"
    "ytes\030\010 \001(\014:\020a \\000 character\"\177\n\013AllocVal"
    "ues\022\017\n\007o_bytes\030\001 \001(\014\022\020\n\010r_string\030\002 \003(\t\022\020"
    "\n\010a_string\030\003 \002(\t\022\017\n\007a_bytes\030\004 \002(\014\022*\n\006a_m"
    "ess\030\005 \002(\0132\032.foo.DefaultRequiredValues*+\n"
    "\rTestEnumSmall\022\t\n\005VALUE\020\000\022\017\n\013OTHER_VALUE"
    "\020\001*\272\001\n\010TestEnum\022\n\n\006VALUE0\020\000\022\n\n\006VALUE1\020\001\022"
    "\014\n\010VALUE127\020\177\022\r\n\010VALUE128\020\200\001\022\017\n\nVALUE163"
    "83\020\377\177\022\020\n\nVALUE16384\020\200\200\001\022\022\n\014VALUE2097151\020"
    "\377\377\177\022\023\n\014VALUE2097152\020\200\200\200\001\022\025\n\016VALUE2684354"
    "55\020\377\377\377\177\022\026\n\016VALUE268435456\020\200\200\200\200\001*\202\001\n\021Test"
    "EnumDupValues\022\013\n\007VALUE_A\020*\022\013\n\007VALUE_B\020*\022"
    "\013\n\007VALUE_C\020*\022\014\n\007VALUE_D\020\232\005\022\014\n\007VALUE_E\020\232\005"
    "\022\014\n\007VALUE_F\020\350\007\022\r\n\010VALUE_AA\020\350\007\022\r\n\010VALUE_B"
    "B\020\351\007", 3404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test-full.proto", &protobuf_RegisterTypes);
  SubMess::default_instance_ = new SubMess();
  TestFieldNo15::default_instance_ = new TestFieldNo15();
  TestFieldNo16::default_instance_ = new TestFieldNo16();
  TestFieldNo2047::default_instance_ = new TestFieldNo2047();
  TestFieldNo2048::default_instance_ = new TestFieldNo2048();
  TestFieldNo262143::default_instance_ = new TestFieldNo262143();
  TestFieldNo262144::default_instance_ = new TestFieldNo262144();
  TestFieldNo33554431::default_instance_ = new TestFieldNo33554431();
  TestFieldNo33554432::default_instance_ = new TestFieldNo33554432();
  TestMess::default_instance_ = new TestMess();
  TestMessPacked::default_instance_ = new TestMessPacked();
  TestMessOptional::default_instance_ = new TestMessOptional();
  TestMessRequiredInt32::default_instance_ = new TestMessRequiredInt32();
  TestMessRequiredSInt32::default_instance_ = new TestMessRequiredSInt32();
  TestMessRequiredSFixed32::default_instance_ = new TestMessRequiredSFixed32();
  TestMessRequiredInt64::default_instance_ = new TestMessRequiredInt64();
  TestMessRequiredSInt64::default_instance_ = new TestMessRequiredSInt64();
  TestMessRequiredSFixed64::default_instance_ = new TestMessRequiredSFixed64();
  TestMessRequiredUInt32::default_instance_ = new TestMessRequiredUInt32();
  TestMessRequiredFixed32::default_instance_ = new TestMessRequiredFixed32();
  TestMessRequiredUInt64::default_instance_ = new TestMessRequiredUInt64();
  TestMessRequiredFixed64::default_instance_ = new TestMessRequiredFixed64();
  TestMessRequiredFloat::default_instance_ = new TestMessRequiredFloat();
  TestMessRequiredDouble::default_instance_ = new TestMessRequiredDouble();
  TestMessRequiredBool::default_instance_ = new TestMessRequiredBool();
  TestMessRequiredEnum::default_instance_ = new TestMessRequiredEnum();
  TestMessRequiredEnumSmall::default_instance_ = new TestMessRequiredEnumSmall();
  TestMessRequiredString::default_instance_ = new TestMessRequiredString();
  TestMessRequiredBytes::default_instance_ = new TestMessRequiredBytes();
  TestMessRequiredMessage::default_instance_ = new TestMessRequiredMessage();
  EmptyMess::default_instance_ = new EmptyMess();
  DefaultRequiredValues::default_instance_ = new DefaultRequiredValues();
  DefaultOptionalValues::default_instance_ = new DefaultOptionalValues();
  AllocValues::default_instance_ = new AllocValues();
  SubMess::default_instance_->InitAsDefaultInstance();
  TestFieldNo15::default_instance_->InitAsDefaultInstance();
  TestFieldNo16::default_instance_->InitAsDefaultInstance();
  TestFieldNo2047::default_instance_->InitAsDefaultInstance();
  TestFieldNo2048::default_instance_->InitAsDefaultInstance();
  TestFieldNo262143::default_instance_->InitAsDefaultInstance();
  TestFieldNo262144::default_instance_->InitAsDefaultInstance();
  TestFieldNo33554431::default_instance_->InitAsDefaultInstance();
  TestFieldNo33554432::default_instance_->InitAsDefaultInstance();
  TestMess::default_instance_->InitAsDefaultInstance();
  TestMessPacked::default_instance_->InitAsDefaultInstance();
  TestMessOptional::default_instance_->InitAsDefaultInstance();
  TestMessRequiredInt32::default_instance_->InitAsDefaultInstance();
  TestMessRequiredSInt32::default_instance_->InitAsDefaultInstance();
  TestMessRequiredSFixed32::default_instance_->InitAsDefaultInstance();
  TestMessRequiredInt64::default_instance_->InitAsDefaultInstance();
  TestMessRequiredSInt64::default_instance_->InitAsDefaultInstance();
  TestMessRequiredSFixed64::default_instance_->InitAsDefaultInstance();
  TestMessRequiredUInt32::default_instance_->InitAsDefaultInstance();
  TestMessRequiredFixed32::default_instance_->InitAsDefaultInstance();
  TestMessRequiredUInt64::default_instance_->InitAsDefaultInstance();
  TestMessRequiredFixed64::default_instance_->InitAsDefaultInstance();
  TestMessRequiredFloat::default_instance_->InitAsDefaultInstance();
  TestMessRequiredDouble::default_instance_->InitAsDefaultInstance();
  TestMessRequiredBool::default_instance_->InitAsDefaultInstance();
  TestMessRequiredEnum::default_instance_->InitAsDefaultInstance();
  TestMessRequiredEnumSmall::default_instance_->InitAsDefaultInstance();
  TestMessRequiredString::default_instance_->InitAsDefaultInstance();
  TestMessRequiredBytes::default_instance_->InitAsDefaultInstance();
  TestMessRequiredMessage::default_instance_->InitAsDefaultInstance();
  EmptyMess::default_instance_->InitAsDefaultInstance();
  DefaultRequiredValues::default_instance_->InitAsDefaultInstance();
  DefaultOptionalValues::default_instance_->InitAsDefaultInstance();
  AllocValues::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2dfull_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2dfull_2eproto {
  StaticDescriptorInitializer_test_2dfull_2eproto() {
    protobuf_AddDesc_test_2dfull_2eproto();
  }
} static_descriptor_initializer_test_2dfull_2eproto_;

const ::google::protobuf::EnumDescriptor* TestEnumSmall_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEnumSmall_descriptor_;
}
bool TestEnumSmall_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEnum_descriptor_;
}
bool TestEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 127:
    case 128:
    case 16383:
    case 16384:
    case 2097151:
    case 2097152:
    case 268435455:
    case 268435456:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TestEnumDupValues_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEnumDupValues_descriptor_;
}
bool TestEnumDupValues_IsValid(int value) {
  switch(value) {
    case 42:
    case 666:
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SubMess::kTestFieldNumber;
#endif  // !_MSC_VER

SubMess::SubMess() {
  SharedCtor();
}

void SubMess::InitAsDefaultInstance() {
}

SubMess::SubMess(const SubMess& from) {
  SharedCtor();
  MergeFrom(from);
}

void SubMess::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubMess::~SubMess() {
  SharedDtor();
}

void SubMess::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SubMess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubMess_descriptor_;
}

const SubMess& SubMess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

SubMess* SubMess::default_instance_ = NULL;

SubMess* SubMess::New() const {
  return new SubMess;
}

void SubMess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubMess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 test = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubMess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SubMess::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 test = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubMess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 test = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubMess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 test = 4;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SubMess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubMess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubMess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubMess::MergeFrom(const SubMess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubMess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubMess::CopyFrom(const SubMess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubMess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubMess::Swap(SubMess* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubMess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubMess_descriptor_;
  metadata.reflection = SubMess_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo15::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo15::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo15::TestFieldNo15() {
  SharedCtor();
}

void TestFieldNo15::InitAsDefaultInstance() {
}

TestFieldNo15::TestFieldNo15(const TestFieldNo15& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo15::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo15::~TestFieldNo15() {
  SharedDtor();
}

void TestFieldNo15::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo15::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo15_descriptor_;
}

const TestFieldNo15& TestFieldNo15::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo15* TestFieldNo15::default_instance_ = NULL;

TestFieldNo15* TestFieldNo15::New() const {
  return new TestFieldNo15;
}

void TestFieldNo15::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo15::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo15::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo15::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 15;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo15::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 15;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo15::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 15;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo15::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo15* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo15*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo15::MergeFrom(const TestFieldNo15& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo15::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo15::CopyFrom(const TestFieldNo15& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo15::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo15::Swap(TestFieldNo15* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo15::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo15_descriptor_;
  metadata.reflection = TestFieldNo15_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo16::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo16::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo16::TestFieldNo16() {
  SharedCtor();
}

void TestFieldNo16::InitAsDefaultInstance() {
}

TestFieldNo16::TestFieldNo16(const TestFieldNo16& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo16::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo16::~TestFieldNo16() {
  SharedDtor();
}

void TestFieldNo16::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo16_descriptor_;
}

const TestFieldNo16& TestFieldNo16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo16* TestFieldNo16::default_instance_ = NULL;

TestFieldNo16* TestFieldNo16::New() const {
  return new TestFieldNo16;
}

void TestFieldNo16::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo16::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 16;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo16::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 16;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo16::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 16;
    if (has_test()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo16::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo16* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo16*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo16::MergeFrom(const TestFieldNo16& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo16::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo16::CopyFrom(const TestFieldNo16& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo16::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo16::Swap(TestFieldNo16* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo16_descriptor_;
  metadata.reflection = TestFieldNo16_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo2047::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo2047::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo2047::TestFieldNo2047() {
  SharedCtor();
}

void TestFieldNo2047::InitAsDefaultInstance() {
}

TestFieldNo2047::TestFieldNo2047(const TestFieldNo2047& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo2047::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo2047::~TestFieldNo2047() {
  SharedDtor();
}

void TestFieldNo2047::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo2047::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo2047_descriptor_;
}

const TestFieldNo2047& TestFieldNo2047::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo2047* TestFieldNo2047::default_instance_ = NULL;

TestFieldNo2047* TestFieldNo2047::New() const {
  return new TestFieldNo2047;
}

void TestFieldNo2047::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo2047::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 2047;
      case 2047: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo2047::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo2047::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 2047;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2047, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo2047::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 2047;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2047, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo2047::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 2047;
    if (has_test()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo2047::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo2047* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo2047*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo2047::MergeFrom(const TestFieldNo2047& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo2047::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo2047::CopyFrom(const TestFieldNo2047& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo2047::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo2047::Swap(TestFieldNo2047* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo2047::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo2047_descriptor_;
  metadata.reflection = TestFieldNo2047_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo2048::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo2048::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo2048::TestFieldNo2048() {
  SharedCtor();
}

void TestFieldNo2048::InitAsDefaultInstance() {
}

TestFieldNo2048::TestFieldNo2048(const TestFieldNo2048& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo2048::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo2048::~TestFieldNo2048() {
  SharedDtor();
}

void TestFieldNo2048::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo2048::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo2048_descriptor_;
}

const TestFieldNo2048& TestFieldNo2048::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo2048* TestFieldNo2048::default_instance_ = NULL;

TestFieldNo2048* TestFieldNo2048::New() const {
  return new TestFieldNo2048;
}

void TestFieldNo2048::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo2048::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 2048;
      case 2048: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo2048::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo2048::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 2048;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2048, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo2048::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 2048;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2048, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo2048::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 2048;
    if (has_test()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo2048::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo2048* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo2048*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo2048::MergeFrom(const TestFieldNo2048& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo2048::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo2048::CopyFrom(const TestFieldNo2048& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo2048::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo2048::Swap(TestFieldNo2048* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo2048::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo2048_descriptor_;
  metadata.reflection = TestFieldNo2048_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo262143::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo262143::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo262143::TestFieldNo262143() {
  SharedCtor();
}

void TestFieldNo262143::InitAsDefaultInstance() {
}

TestFieldNo262143::TestFieldNo262143(const TestFieldNo262143& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo262143::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo262143::~TestFieldNo262143() {
  SharedDtor();
}

void TestFieldNo262143::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo262143::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo262143_descriptor_;
}

const TestFieldNo262143& TestFieldNo262143::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo262143* TestFieldNo262143::default_instance_ = NULL;

TestFieldNo262143* TestFieldNo262143::New() const {
  return new TestFieldNo262143;
}

void TestFieldNo262143::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo262143::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 262143;
      case 262143: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo262143::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo262143::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 262143;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      262143, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo262143::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 262143;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        262143, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo262143::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 262143;
    if (has_test()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo262143::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo262143* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo262143*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo262143::MergeFrom(const TestFieldNo262143& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo262143::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo262143::CopyFrom(const TestFieldNo262143& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo262143::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo262143::Swap(TestFieldNo262143* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo262143::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo262143_descriptor_;
  metadata.reflection = TestFieldNo262143_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo262144::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo262144::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo262144::TestFieldNo262144() {
  SharedCtor();
}

void TestFieldNo262144::InitAsDefaultInstance() {
}

TestFieldNo262144::TestFieldNo262144(const TestFieldNo262144& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo262144::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo262144::~TestFieldNo262144() {
  SharedDtor();
}

void TestFieldNo262144::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo262144::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo262144_descriptor_;
}

const TestFieldNo262144& TestFieldNo262144::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo262144* TestFieldNo262144::default_instance_ = NULL;

TestFieldNo262144* TestFieldNo262144::New() const {
  return new TestFieldNo262144;
}

void TestFieldNo262144::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo262144::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 262144;
      case 262144: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo262144::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo262144::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 262144;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      262144, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo262144::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 262144;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        262144, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo262144::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 262144;
    if (has_test()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo262144::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo262144* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo262144*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo262144::MergeFrom(const TestFieldNo262144& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo262144::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo262144::CopyFrom(const TestFieldNo262144& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo262144::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo262144::Swap(TestFieldNo262144* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo262144::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo262144_descriptor_;
  metadata.reflection = TestFieldNo262144_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo33554431::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo33554431::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo33554431::TestFieldNo33554431() {
  SharedCtor();
}

void TestFieldNo33554431::InitAsDefaultInstance() {
}

TestFieldNo33554431::TestFieldNo33554431(const TestFieldNo33554431& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo33554431::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo33554431::~TestFieldNo33554431() {
  SharedDtor();
}

void TestFieldNo33554431::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo33554431::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo33554431_descriptor_;
}

const TestFieldNo33554431& TestFieldNo33554431::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo33554431* TestFieldNo33554431::default_instance_ = NULL;

TestFieldNo33554431* TestFieldNo33554431::New() const {
  return new TestFieldNo33554431;
}

void TestFieldNo33554431::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo33554431::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 33554431;
      case 33554431: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo33554431::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo33554431::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 33554431;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33554431, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo33554431::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 33554431;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33554431, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo33554431::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 33554431;
    if (has_test()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo33554431::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo33554431* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo33554431*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo33554431::MergeFrom(const TestFieldNo33554431& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo33554431::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo33554431::CopyFrom(const TestFieldNo33554431& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo33554431::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo33554431::Swap(TestFieldNo33554431* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo33554431::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo33554431_descriptor_;
  metadata.reflection = TestFieldNo33554431_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestFieldNo33554432::_default_test_;
#ifndef _MSC_VER
const int TestFieldNo33554432::kTestFieldNumber;
#endif  // !_MSC_VER

TestFieldNo33554432::TestFieldNo33554432() {
  SharedCtor();
}

void TestFieldNo33554432::InitAsDefaultInstance() {
}

TestFieldNo33554432::TestFieldNo33554432(const TestFieldNo33554432& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestFieldNo33554432::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestFieldNo33554432::~TestFieldNo33554432() {
  SharedDtor();
}

void TestFieldNo33554432::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestFieldNo33554432::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestFieldNo33554432_descriptor_;
}

const TestFieldNo33554432& TestFieldNo33554432::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestFieldNo33554432* TestFieldNo33554432::default_instance_ = NULL;

TestFieldNo33554432* TestFieldNo33554432::New() const {
  return new TestFieldNo33554432;
}

void TestFieldNo33554432::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestFieldNo33554432::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 33554432;
      case 33554432: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestFieldNo33554432::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestFieldNo33554432::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 33554432;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33554432, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestFieldNo33554432::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 33554432;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33554432, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestFieldNo33554432::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 33554432;
    if (has_test()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestFieldNo33554432::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestFieldNo33554432* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestFieldNo33554432*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestFieldNo33554432::MergeFrom(const TestFieldNo33554432& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestFieldNo33554432::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo33554432::CopyFrom(const TestFieldNo33554432& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo33554432::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestFieldNo33554432::Swap(TestFieldNo33554432* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestFieldNo33554432::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestFieldNo33554432_descriptor_;
  metadata.reflection = TestFieldNo33554432_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMess::kTestInt32FieldNumber;
const int TestMess::kTestSint32FieldNumber;
const int TestMess::kTestSfixed32FieldNumber;
const int TestMess::kTestInt64FieldNumber;
const int TestMess::kTestSint64FieldNumber;
const int TestMess::kTestSfixed64FieldNumber;
const int TestMess::kTestUint32FieldNumber;
const int TestMess::kTestFixed32FieldNumber;
const int TestMess::kTestUint64FieldNumber;
const int TestMess::kTestFixed64FieldNumber;
const int TestMess::kTestFloatFieldNumber;
const int TestMess::kTestDoubleFieldNumber;
const int TestMess::kTestBooleanFieldNumber;
const int TestMess::kTestEnumSmallFieldNumber;
const int TestMess::kTestEnumFieldNumber;
const int TestMess::kTestStringFieldNumber;
const int TestMess::kTestBytesFieldNumber;
const int TestMess::kTestMessageFieldNumber;
#endif  // !_MSC_VER

TestMess::TestMess() {
  SharedCtor();
}

void TestMess::InitAsDefaultInstance() {
}

TestMess::TestMess(const TestMess& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMess::~TestMess() {
  SharedDtor();
}

void TestMess::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMess_descriptor_;
}

const TestMess& TestMess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMess* TestMess::default_instance_ = NULL;

TestMess* TestMess::New() const {
  return new TestMess;
}

void TestMess::Clear() {
  test_int32_.Clear();
  test_sint32_.Clear();
  test_sfixed32_.Clear();
  test_int64_.Clear();
  test_sint64_.Clear();
  test_sfixed64_.Clear();
  test_uint32_.Clear();
  test_fixed32_.Clear();
  test_uint64_.Clear();
  test_fixed64_.Clear();
  test_float_.Clear();
  test_double_.Clear();
  test_boolean_.Clear();
  test_enum_small_.Clear();
  test_enum_.Clear();
  test_string_.Clear();
  test_bytes_.Clear();
  test_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 test_int32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_int32:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_test_int32(value);
        if (input->ExpectTag(8)) goto parse_test_int32;
        if (input->ExpectTag(16)) goto parse_test_sint32;
        break;
      }
      
      // repeated sint32 test_sint32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_sint32:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadSInt32(
              input, &value));
        add_test_sint32(value);
        if (input->ExpectTag(16)) goto parse_test_sint32;
        if (input->ExpectTag(29)) goto parse_test_sfixed32;
        break;
      }
      
      // repeated sfixed32 test_sfixed32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_test_sfixed32:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed32(
              input, &value));
        add_test_sfixed32(value);
        if (input->ExpectTag(29)) goto parse_test_sfixed32;
        if (input->ExpectTag(32)) goto parse_test_int64;
        break;
      }
      
      // repeated int64 test_int64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_int64:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_test_int64(value);
        if (input->ExpectTag(32)) goto parse_test_int64;
        if (input->ExpectTag(40)) goto parse_test_sint64;
        break;
      }
      
      // repeated sint64 test_sint64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_sint64:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadSInt64(
              input, &value));
        add_test_sint64(value);
        if (input->ExpectTag(40)) goto parse_test_sint64;
        if (input->ExpectTag(49)) goto parse_test_sfixed64;
        break;
      }
      
      // repeated sfixed64 test_sfixed64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_test_sfixed64:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed64(
              input, &value));
        add_test_sfixed64(value);
        if (input->ExpectTag(49)) goto parse_test_sfixed64;
        if (input->ExpectTag(56)) goto parse_test_uint32;
        break;
      }
      
      // repeated uint32 test_uint32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_uint32:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_test_uint32(value);
        if (input->ExpectTag(56)) goto parse_test_uint32;
        if (input->ExpectTag(69)) goto parse_test_fixed32;
        break;
      }
      
      // repeated fixed32 test_fixed32 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_test_fixed32:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed32(
              input, &value));
        add_test_fixed32(value);
        if (input->ExpectTag(69)) goto parse_test_fixed32;
        if (input->ExpectTag(72)) goto parse_test_uint64;
        break;
      }
      
      // repeated uint64 test_uint64 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_uint64:
        ::google::protobuf::uint64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &value));
        add_test_uint64(value);
        if (input->ExpectTag(72)) goto parse_test_uint64;
        if (input->ExpectTag(81)) goto parse_test_fixed64;
        break;
      }
      
      // repeated fixed64 test_fixed64 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_test_fixed64:
        ::google::protobuf::uint64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
              input, &value));
        add_test_fixed64(value);
        if (input->ExpectTag(81)) goto parse_test_fixed64;
        if (input->ExpectTag(93)) goto parse_test_float;
        break;
      }
      
      // repeated float test_float = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_test_float:
        float value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &value));
        add_test_float(value);
        if (input->ExpectTag(93)) goto parse_test_float;
        if (input->ExpectTag(97)) goto parse_test_double;
        break;
      }
      
      // repeated double test_double = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_test_double:
        double value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &value));
        add_test_double(value);
        if (input->ExpectTag(97)) goto parse_test_double;
        if (input->ExpectTag(104)) goto parse_test_boolean;
        break;
      }
      
      // repeated bool test_boolean = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_boolean:
        bool value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &value));
        add_test_boolean(value);
        if (input->ExpectTag(104)) goto parse_test_boolean;
        if (input->ExpectTag(112)) goto parse_test_enum_small;
        break;
      }
      
      // repeated .foo.TestEnumSmall test_enum_small = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_enum_small:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (foo::TestEnumSmall_IsValid(value)) {
          add_test_enum_small(static_cast< foo::TestEnumSmall >(value));
        } else {
          mutable_unknown_fields()->AddVarint(14, value);
        }
        if (input->ExpectTag(112)) goto parse_test_enum_small;
        if (input->ExpectTag(120)) goto parse_test_enum;
        break;
      }
      
      // repeated .foo.TestEnum test_enum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_enum:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (foo::TestEnum_IsValid(value)) {
          add_test_enum(static_cast< foo::TestEnum >(value));
        } else {
          mutable_unknown_fields()->AddVarint(15, value);
        }
        if (input->ExpectTag(120)) goto parse_test_enum;
        if (input->ExpectTag(130)) goto parse_test_string;
        break;
      }
      
      // repeated string test_string = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_string:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_test_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test_string(0).data(), this->test_string(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(130)) goto parse_test_string;
        if (input->ExpectTag(138)) goto parse_test_bytes;
        break;
      }
      
      // repeated bytes test_bytes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_bytes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_test_bytes()));
        if (input->ExpectTag(138)) goto parse_test_bytes;
        if (input->ExpectTag(146)) goto parse_test_message;
        break;
      }
      
      // repeated .foo.SubMess test_message = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_test_message()));
        if (input->ExpectTag(146)) goto parse_test_message;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMess::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 test_int32 = 1;
  for (int i = 0; i < this->test_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->test_int32(i), output);
  }
  
  // repeated sint32 test_sint32 = 2;
  for (int i = 0; i < this->test_sint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->test_sint32(i), output);
  }
  
  // repeated sfixed32 test_sfixed32 = 3;
  for (int i = 0; i < this->test_sfixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      3, this->test_sfixed32(i), output);
  }
  
  // repeated int64 test_int64 = 4;
  for (int i = 0; i < this->test_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->test_int64(i), output);
  }
  
  // repeated sint64 test_sint64 = 5;
  for (int i = 0; i < this->test_sint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      5, this->test_sint64(i), output);
  }
  
  // repeated sfixed64 test_sfixed64 = 6;
  for (int i = 0; i < this->test_sfixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      6, this->test_sfixed64(i), output);
  }
  
  // repeated uint32 test_uint32 = 7;
  for (int i = 0; i < this->test_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->test_uint32(i), output);
  }
  
  // repeated fixed32 test_fixed32 = 8;
  for (int i = 0; i < this->test_fixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      8, this->test_fixed32(i), output);
  }
  
  // repeated uint64 test_uint64 = 9;
  for (int i = 0; i < this->test_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->test_uint64(i), output);
  }
  
  // repeated fixed64 test_fixed64 = 10;
  for (int i = 0; i < this->test_fixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->test_fixed64(i), output);
  }
  
  // repeated float test_float = 11;
  for (int i = 0; i < this->test_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->test_float(i), output);
  }
  
  // repeated double test_double = 12;
  for (int i = 0; i < this->test_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->test_double(i), output);
  }
  
  // repeated bool test_boolean = 13;
  for (int i = 0; i < this->test_boolean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      13, this->test_boolean(i), output);
  }
  
  // repeated .foo.TestEnumSmall test_enum_small = 14;
  for (int i = 0; i < this->test_enum_small_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->test_enum_small(i), output);
  }
  
  // repeated .foo.TestEnum test_enum = 15;
  for (int i = 0; i < this->test_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->test_enum(i), output);
  }
  
  // repeated string test_string = 16;
  for (int i = 0; i < this->test_string_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->test_string(i).data(), this->test_string(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->test_string(i), output);
  }
  
  // repeated bytes test_bytes = 17;
  for (int i = 0; i < this->test_bytes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->test_bytes(i), output);
  }
  
  // repeated .foo.SubMess test_message = 18;
  for (int i = 0; i < this->test_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->test_message(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 test_int32 = 1;
  for (int i = 0; i < this->test_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->test_int32(i), target);
  }
  
  // repeated sint32 test_sint32 = 2;
  for (int i = 0; i < this->test_sint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->test_sint32(i), target);
  }
  
  // repeated sfixed32 test_sfixed32 = 3;
  for (int i = 0; i < this->test_sfixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(3, this->test_sfixed32(i), target);
  }
  
  // repeated int64 test_int64 = 4;
  for (int i = 0; i < this->test_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->test_int64(i), target);
  }
  
  // repeated sint64 test_sint64 = 5;
  for (int i = 0; i < this->test_sint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(5, this->test_sint64(i), target);
  }
  
  // repeated sfixed64 test_sfixed64 = 6;
  for (int i = 0; i < this->test_sfixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64ToArray(6, this->test_sfixed64(i), target);
  }
  
  // repeated uint32 test_uint32 = 7;
  for (int i = 0; i < this->test_uint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->test_uint32(i), target);
  }
  
  // repeated fixed32 test_fixed32 = 8;
  for (int i = 0; i < this->test_fixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(8, this->test_fixed32(i), target);
  }
  
  // repeated uint64 test_uint64 = 9;
  for (int i = 0; i < this->test_uint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(9, this->test_uint64(i), target);
  }
  
  // repeated fixed64 test_fixed64 = 10;
  for (int i = 0; i < this->test_fixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->test_fixed64(i), target);
  }
  
  // repeated float test_float = 11;
  for (int i = 0; i < this->test_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->test_float(i), target);
  }
  
  // repeated double test_double = 12;
  for (int i = 0; i < this->test_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->test_double(i), target);
  }
  
  // repeated bool test_boolean = 13;
  for (int i = 0; i < this->test_boolean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(13, this->test_boolean(i), target);
  }
  
  // repeated .foo.TestEnumSmall test_enum_small = 14;
  for (int i = 0; i < this->test_enum_small_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->test_enum_small(i), target);
  }
  
  // repeated .foo.TestEnum test_enum = 15;
  for (int i = 0; i < this->test_enum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->test_enum(i), target);
  }
  
  // repeated string test_string = 16;
  for (int i = 0; i < this->test_string_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_string(i).data(), this->test_string(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->test_string(i), target);
  }
  
  // repeated bytes test_bytes = 17;
  for (int i = 0; i < this->test_bytes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(17, this->test_bytes(i), target);
  }
  
  // repeated .foo.SubMess test_message = 18;
  for (int i = 0; i < this->test_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->test_message(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMess::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 test_int32 = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test_int32(i));
    }
    total_size += 1 * this->test_int32_size() + data_size;
  }
  
  // repeated sint32 test_sint32 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_sint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->test_sint32(i));
    }
    total_size += 1 * this->test_sint32_size() + data_size;
  }
  
  // repeated sfixed32 test_sfixed32 = 3;
  {
    int data_size = 0;
    data_size = 4 * this->test_sfixed32_size();
    total_size += 1 * this->test_sfixed32_size() + data_size;
  }
  
  // repeated int64 test_int64 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->test_int64(i));
    }
    total_size += 1 * this->test_int64_size() + data_size;
  }
  
  // repeated sint64 test_sint64 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_sint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->test_sint64(i));
    }
    total_size += 1 * this->test_sint64_size() + data_size;
  }
  
  // repeated sfixed64 test_sfixed64 = 6;
  {
    int data_size = 0;
    data_size = 8 * this->test_sfixed64_size();
    total_size += 1 * this->test_sfixed64_size() + data_size;
  }
  
  // repeated uint32 test_uint32 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_uint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->test_uint32(i));
    }
    total_size += 1 * this->test_uint32_size() + data_size;
  }
  
  // repeated fixed32 test_fixed32 = 8;
  {
    int data_size = 0;
    data_size = 4 * this->test_fixed32_size();
    total_size += 1 * this->test_fixed32_size() + data_size;
  }
  
  // repeated uint64 test_uint64 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_uint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->test_uint64(i));
    }
    total_size += 1 * this->test_uint64_size() + data_size;
  }
  
  // repeated fixed64 test_fixed64 = 10;
  {
    int data_size = 0;
    data_size = 8 * this->test_fixed64_size();
    total_size += 1 * this->test_fixed64_size() + data_size;
  }
  
  // repeated float test_float = 11;
  {
    int data_size = 0;
    data_size = 4 * this->test_float_size();
    total_size += 1 * this->test_float_size() + data_size;
  }
  
  // repeated double test_double = 12;
  {
    int data_size = 0;
    data_size = 8 * this->test_double_size();
    total_size += 1 * this->test_double_size() + data_size;
  }
  
  // repeated bool test_boolean = 13;
  {
    int data_size = 0;
    data_size = 1 * this->test_boolean_size();
    total_size += 1 * this->test_boolean_size() + data_size;
  }
  
  // repeated .foo.TestEnumSmall test_enum_small = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_enum_small_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->test_enum_small(i));
    }
    total_size += 1 * this->test_enum_small_size() + data_size;
  }
  
  // repeated .foo.TestEnum test_enum = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->test_enum(i));
    }
    total_size += 1 * this->test_enum_size() + data_size;
  }
  
  // repeated string test_string = 16;
  total_size += 2 * this->test_string_size();
  for (int i = 0; i < this->test_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_string(i));
  }
  
  // repeated bytes test_bytes = 17;
  total_size += 2 * this->test_bytes_size();
  for (int i = 0; i < this->test_bytes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->test_bytes(i));
  }
  
  // repeated .foo.SubMess test_message = 18;
  total_size += 2 * this->test_message_size();
  for (int i = 0; i < this->test_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test_message(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMess::MergeFrom(const TestMess& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_int32_.MergeFrom(from.test_int32_);
  test_sint32_.MergeFrom(from.test_sint32_);
  test_sfixed32_.MergeFrom(from.test_sfixed32_);
  test_int64_.MergeFrom(from.test_int64_);
  test_sint64_.MergeFrom(from.test_sint64_);
  test_sfixed64_.MergeFrom(from.test_sfixed64_);
  test_uint32_.MergeFrom(from.test_uint32_);
  test_fixed32_.MergeFrom(from.test_fixed32_);
  test_uint64_.MergeFrom(from.test_uint64_);
  test_fixed64_.MergeFrom(from.test_fixed64_);
  test_float_.MergeFrom(from.test_float_);
  test_double_.MergeFrom(from.test_double_);
  test_boolean_.MergeFrom(from.test_boolean_);
  test_enum_small_.MergeFrom(from.test_enum_small_);
  test_enum_.MergeFrom(from.test_enum_);
  test_string_.MergeFrom(from.test_string_);
  test_bytes_.MergeFrom(from.test_bytes_);
  test_message_.MergeFrom(from.test_message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMess::CopyFrom(const TestMess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMess::IsInitialized() const {
  
  for (int i = 0; i < test_message_size(); i++) {
    if (!this->test_message(i).IsInitialized()) return false;
  }
  return true;
}

void TestMess::Swap(TestMess* other) {
  if (other != this) {
    test_int32_.Swap(&other->test_int32_);
    test_sint32_.Swap(&other->test_sint32_);
    test_sfixed32_.Swap(&other->test_sfixed32_);
    test_int64_.Swap(&other->test_int64_);
    test_sint64_.Swap(&other->test_sint64_);
    test_sfixed64_.Swap(&other->test_sfixed64_);
    test_uint32_.Swap(&other->test_uint32_);
    test_fixed32_.Swap(&other->test_fixed32_);
    test_uint64_.Swap(&other->test_uint64_);
    test_fixed64_.Swap(&other->test_fixed64_);
    test_float_.Swap(&other->test_float_);
    test_double_.Swap(&other->test_double_);
    test_boolean_.Swap(&other->test_boolean_);
    test_enum_small_.Swap(&other->test_enum_small_);
    test_enum_.Swap(&other->test_enum_);
    test_string_.Swap(&other->test_string_);
    test_bytes_.Swap(&other->test_bytes_);
    test_message_.Swap(&other->test_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMess_descriptor_;
  metadata.reflection = TestMess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessPacked::kTestInt32FieldNumber;
const int TestMessPacked::kTestSint32FieldNumber;
const int TestMessPacked::kTestSfixed32FieldNumber;
const int TestMessPacked::kTestInt64FieldNumber;
const int TestMessPacked::kTestSint64FieldNumber;
const int TestMessPacked::kTestSfixed64FieldNumber;
const int TestMessPacked::kTestUint32FieldNumber;
const int TestMessPacked::kTestFixed32FieldNumber;
const int TestMessPacked::kTestUint64FieldNumber;
const int TestMessPacked::kTestFixed64FieldNumber;
const int TestMessPacked::kTestFloatFieldNumber;
const int TestMessPacked::kTestDoubleFieldNumber;
const int TestMessPacked::kTestBooleanFieldNumber;
const int TestMessPacked::kTestEnumSmallFieldNumber;
const int TestMessPacked::kTestEnumFieldNumber;
#endif  // !_MSC_VER

TestMessPacked::TestMessPacked() {
  SharedCtor();
}

void TestMessPacked::InitAsDefaultInstance() {
}

TestMessPacked::TestMessPacked(const TestMessPacked& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessPacked::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessPacked::~TestMessPacked() {
  SharedDtor();
}

void TestMessPacked::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessPacked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessPacked_descriptor_;
}

const TestMessPacked& TestMessPacked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessPacked* TestMessPacked::default_instance_ = NULL;

TestMessPacked* TestMessPacked::New() const {
  return new TestMessPacked;
}

void TestMessPacked::Clear() {
  test_int32_.Clear();
  test_sint32_.Clear();
  test_sfixed32_.Clear();
  test_int64_.Clear();
  test_sint64_.Clear();
  test_sfixed64_.Clear();
  test_uint32_.Clear();
  test_fixed32_.Clear();
  test_uint64_.Clear();
  test_fixed64_.Clear();
  test_float_.Clear();
  test_double_.Clear();
  test_boolean_.Clear();
  test_enum_small_.Clear();
  test_enum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessPacked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 test_int32 = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_test_int32(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(18)) goto parse_test_sint32;
        break;
      }
      
      // repeated sint32 test_sint32 = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_sint32:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadSInt32(
                  input, &value));
            add_test_sint32(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(26)) goto parse_test_sfixed32;
        break;
      }
      
      // repeated sfixed32 test_sfixed32 = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_sfixed32:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed32(
                  input, &value));
            add_test_sfixed32(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(34)) goto parse_test_int64;
        break;
      }
      
      // repeated int64 test_int64 = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_int64:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int64 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
                  input, &value));
            add_test_int64(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(42)) goto parse_test_sint64;
        break;
      }
      
      // repeated sint64 test_sint64 = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_sint64:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int64 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadSInt64(
                  input, &value));
            add_test_sint64(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(50)) goto parse_test_sfixed64;
        break;
      }
      
      // repeated sfixed64 test_sfixed64 = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_sfixed64:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int64 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed64(
                  input, &value));
            add_test_sfixed64(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(58)) goto parse_test_uint32;
        break;
      }
      
      // repeated uint32 test_uint32 = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_uint32:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::uint32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
                  input, &value));
            add_test_uint32(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(66)) goto parse_test_fixed32;
        break;
      }
      
      // repeated fixed32 test_fixed32 = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_fixed32:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::uint32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadFixed32(
                  input, &value));
            add_test_fixed32(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(74)) goto parse_test_uint64;
        break;
      }
      
      // repeated uint64 test_uint64 = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_uint64:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::uint64 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
                  input, &value));
            add_test_uint64(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(82)) goto parse_test_fixed64;
        break;
      }
      
      // repeated fixed64 test_fixed64 = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_fixed64:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::uint64 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
                  input, &value));
            add_test_fixed64(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(90)) goto parse_test_float;
        break;
      }
      
      // repeated float test_float = 11 [packed = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_float:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            float value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
                  input, &value));
            add_test_float(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(98)) goto parse_test_double;
        break;
      }
      
      // repeated double test_double = 12 [packed = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_double:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            double value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
                  input, &value));
            add_test_double(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(106)) goto parse_test_boolean;
        break;
      }
      
      // repeated bool test_boolean = 13 [packed = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_boolean:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            bool value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
                  input, &value));
            add_test_boolean(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(114)) goto parse_test_enum_small;
        break;
      }
      
      // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_enum_small:
        ::google::protobuf::uint32 length;
        DO_(input->ReadVarint32(&length));
        ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
        while (input->BytesUntilLimit() > 0) {
          int value;
          DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
          if (foo::TestEnumSmall_IsValid(value)) {
            add_test_enum_small(static_cast< foo::TestEnumSmall >(value));
          }
        }
        input->PopLimit(limit);
        if (input->ExpectTag(122)) goto parse_test_enum;
        break;
      }
      
      // repeated .foo.TestEnum test_enum = 15 [packed = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_enum:
        ::google::protobuf::uint32 length;
        DO_(input->ReadVarint32(&length));
        ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
        while (input->BytesUntilLimit() > 0) {
          int value;
          DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
          if (foo::TestEnum_IsValid(value)) {
            add_test_enum(static_cast< foo::TestEnum >(value));
          }
        }
        input->PopLimit(limit);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessPacked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessPacked::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 test_int32 = 1 [packed = true];
  if (this->test_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_int32_cached_byte_size_);
  }
  for (int i = 0; i < this->test_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->test_int32(i), output);
  }
  
  // repeated sint32 test_sint32 = 2 [packed = true];
  if (this->test_sint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_sint32_cached_byte_size_);
  }
  for (int i = 0; i < this->test_sint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->test_sint32(i), output);
  }
  
  // repeated sfixed32 test_sfixed32 = 3 [packed = true];
  if (this->test_sfixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_sfixed32_cached_byte_size_);
  }
  for (int i = 0; i < this->test_sfixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32NoTag(
      this->test_sfixed32(i), output);
  }
  
  // repeated int64 test_int64 = 4 [packed = true];
  if (this->test_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->test_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->test_int64(i), output);
  }
  
  // repeated sint64 test_sint64 = 5 [packed = true];
  if (this->test_sint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_sint64_cached_byte_size_);
  }
  for (int i = 0; i < this->test_sint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->test_sint64(i), output);
  }
  
  // repeated sfixed64 test_sfixed64 = 6 [packed = true];
  if (this->test_sfixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_sfixed64_cached_byte_size_);
  }
  for (int i = 0; i < this->test_sfixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64NoTag(
      this->test_sfixed64(i), output);
  }
  
  // repeated uint32 test_uint32 = 7 [packed = true];
  if (this->test_uint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_uint32_cached_byte_size_);
  }
  for (int i = 0; i < this->test_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->test_uint32(i), output);
  }
  
  // repeated fixed32 test_fixed32 = 8 [packed = true];
  if (this->test_fixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_fixed32_cached_byte_size_);
  }
  for (int i = 0; i < this->test_fixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->test_fixed32(i), output);
  }
  
  // repeated uint64 test_uint64 = 9 [packed = true];
  if (this->test_uint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_uint64_cached_byte_size_);
  }
  for (int i = 0; i < this->test_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->test_uint64(i), output);
  }
  
  // repeated fixed64 test_fixed64 = 10 [packed = true];
  if (this->test_fixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_fixed64_cached_byte_size_);
  }
  for (int i = 0; i < this->test_fixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->test_fixed64(i), output);
  }
  
  // repeated float test_float = 11 [packed = true];
  if (this->test_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_float_cached_byte_size_);
  }
  for (int i = 0; i < this->test_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->test_float(i), output);
  }
  
  // repeated double test_double = 12 [packed = true];
  if (this->test_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_double_cached_byte_size_);
  }
  for (int i = 0; i < this->test_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->test_double(i), output);
  }
  
  // repeated bool test_boolean = 13 [packed = true];
  if (this->test_boolean_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_test_boolean_cached_byte_size_);
  }
  for (int i = 0; i < this->test_boolean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->test_boolean(i), output);
  }
  
  // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
  if (this->test_enum_small_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_test_enum_small_cached_byte_size_);
  }
  for (int i = 0; i < this->test_enum_small_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->test_enum_small(i), output);
  }
  
  // repeated .foo.TestEnum test_enum = 15 [packed = true];
  if (this->test_enum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_test_enum_cached_byte_size_);
  }
  for (int i = 0; i < this->test_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->test_enum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessPacked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 test_int32 = 1 [packed = true];
  if (this->test_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_int32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->test_int32(i), target);
  }
  
  // repeated sint32 test_sint32 = 2 [packed = true];
  if (this->test_sint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_sint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_sint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->test_sint32(i), target);
  }
  
  // repeated sfixed32 test_sfixed32 = 3 [packed = true];
  if (this->test_sfixed32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_sfixed32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_sfixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->test_sfixed32(i), target);
  }
  
  // repeated int64 test_int64 = 4 [packed = true];
  if (this->test_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_int64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->test_int64(i), target);
  }
  
  // repeated sint64 test_sint64 = 5 [packed = true];
  if (this->test_sint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_sint64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_sint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->test_sint64(i), target);
  }
  
  // repeated sfixed64 test_sfixed64 = 6 [packed = true];
  if (this->test_sfixed64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_sfixed64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_sfixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64NoTagToArray(this->test_sfixed64(i), target);
  }
  
  // repeated uint32 test_uint32 = 7 [packed = true];
  if (this->test_uint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_uint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_uint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->test_uint32(i), target);
  }
  
  // repeated fixed32 test_fixed32 = 8 [packed = true];
  if (this->test_fixed32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_fixed32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_fixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->test_fixed32(i), target);
  }
  
  // repeated uint64 test_uint64 = 9 [packed = true];
  if (this->test_uint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_uint64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_uint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->test_uint64(i), target);
  }
  
  // repeated fixed64 test_fixed64 = 10 [packed = true];
  if (this->test_fixed64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_fixed64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_fixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->test_fixed64(i), target);
  }
  
  // repeated float test_float = 11 [packed = true];
  if (this->test_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_float_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->test_float(i), target);
  }
  
  // repeated double test_double = 12 [packed = true];
  if (this->test_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_double_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->test_double(i), target);
  }
  
  // repeated bool test_boolean = 13 [packed = true];
  if (this->test_boolean_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _test_boolean_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_boolean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->test_boolean(i), target);
  }
  
  // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
  if (this->test_enum_small_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _test_enum_small_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_enum_small_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->test_enum_small(i), target);
  }
  
  // repeated .foo.TestEnum test_enum = 15 [packed = true];
  if (this->test_enum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _test_enum_cached_byte_size_, target);
  }
  for (int i = 0; i < this->test_enum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->test_enum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessPacked::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 test_int32 = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test_int32(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_int32_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated sint32 test_sint32 = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_sint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->test_sint32(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_sint32_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated sfixed32 test_sfixed32 = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->test_sfixed32_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_sfixed32_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int64 test_int64 = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->test_int64(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_int64_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated sint64 test_sint64 = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_sint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->test_sint64(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_sint64_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated sfixed64 test_sfixed64 = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->test_sfixed64_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_sfixed64_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint32 test_uint32 = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_uint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->test_uint32(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_uint32_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated fixed32 test_fixed32 = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->test_fixed32_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_fixed32_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint64 test_uint64 = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_uint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->test_uint64(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_uint64_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated fixed64 test_fixed64 = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->test_fixed64_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_fixed64_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float test_float = 11 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->test_float_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_float_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double test_double = 12 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->test_double_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_double_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated bool test_boolean = 13 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->test_boolean_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_boolean_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_enum_small_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->test_enum_small(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_enum_small_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .foo.TestEnum test_enum = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->test_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->test_enum(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _test_enum_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessPacked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessPacked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessPacked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessPacked::MergeFrom(const TestMessPacked& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_int32_.MergeFrom(from.test_int32_);
  test_sint32_.MergeFrom(from.test_sint32_);
  test_sfixed32_.MergeFrom(from.test_sfixed32_);
  test_int64_.MergeFrom(from.test_int64_);
  test_sint64_.MergeFrom(from.test_sint64_);
  test_sfixed64_.MergeFrom(from.test_sfixed64_);
  test_uint32_.MergeFrom(from.test_uint32_);
  test_fixed32_.MergeFrom(from.test_fixed32_);
  test_uint64_.MergeFrom(from.test_uint64_);
  test_fixed64_.MergeFrom(from.test_fixed64_);
  test_float_.MergeFrom(from.test_float_);
  test_double_.MergeFrom(from.test_double_);
  test_boolean_.MergeFrom(from.test_boolean_);
  test_enum_small_.MergeFrom(from.test_enum_small_);
  test_enum_.MergeFrom(from.test_enum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessPacked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessPacked::CopyFrom(const TestMessPacked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessPacked::IsInitialized() const {
  
  return true;
}

void TestMessPacked::Swap(TestMessPacked* other) {
  if (other != this) {
    test_int32_.Swap(&other->test_int32_);
    test_sint32_.Swap(&other->test_sint32_);
    test_sfixed32_.Swap(&other->test_sfixed32_);
    test_int64_.Swap(&other->test_int64_);
    test_sint64_.Swap(&other->test_sint64_);
    test_sfixed64_.Swap(&other->test_sfixed64_);
    test_uint32_.Swap(&other->test_uint32_);
    test_fixed32_.Swap(&other->test_fixed32_);
    test_uint64_.Swap(&other->test_uint64_);
    test_fixed64_.Swap(&other->test_fixed64_);
    test_float_.Swap(&other->test_float_);
    test_double_.Swap(&other->test_double_);
    test_boolean_.Swap(&other->test_boolean_);
    test_enum_small_.Swap(&other->test_enum_small_);
    test_enum_.Swap(&other->test_enum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessPacked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessPacked_descriptor_;
  metadata.reflection = TestMessPacked_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestMessOptional::_default_test_string_;
const ::std::string TestMessOptional::_default_test_bytes_;
#ifndef _MSC_VER
const int TestMessOptional::kTestInt32FieldNumber;
const int TestMessOptional::kTestSint32FieldNumber;
const int TestMessOptional::kTestSfixed32FieldNumber;
const int TestMessOptional::kTestInt64FieldNumber;
const int TestMessOptional::kTestSint64FieldNumber;
const int TestMessOptional::kTestSfixed64FieldNumber;
const int TestMessOptional::kTestUint32FieldNumber;
const int TestMessOptional::kTestFixed32FieldNumber;
const int TestMessOptional::kTestUint64FieldNumber;
const int TestMessOptional::kTestFixed64FieldNumber;
const int TestMessOptional::kTestFloatFieldNumber;
const int TestMessOptional::kTestDoubleFieldNumber;
const int TestMessOptional::kTestBooleanFieldNumber;
const int TestMessOptional::kTestEnumSmallFieldNumber;
const int TestMessOptional::kTestEnumFieldNumber;
const int TestMessOptional::kTestStringFieldNumber;
const int TestMessOptional::kTestBytesFieldNumber;
const int TestMessOptional::kTestMessageFieldNumber;
#endif  // !_MSC_VER

TestMessOptional::TestMessOptional() {
  SharedCtor();
}

void TestMessOptional::InitAsDefaultInstance() {
  test_message_ = const_cast< ::foo::SubMess*>(&::foo::SubMess::default_instance());
}

TestMessOptional::TestMessOptional(const TestMessOptional& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessOptional::SharedCtor() {
  _cached_size_ = 0;
  test_int32_ = 0;
  test_sint32_ = 0;
  test_sfixed32_ = 0;
  test_int64_ = GOOGLE_LONGLONG(0);
  test_sint64_ = GOOGLE_LONGLONG(0);
  test_sfixed64_ = GOOGLE_LONGLONG(0);
  test_uint32_ = 0u;
  test_fixed32_ = 0u;
  test_uint64_ = GOOGLE_ULONGLONG(0);
  test_fixed64_ = GOOGLE_ULONGLONG(0);
  test_float_ = 0;
  test_double_ = 0;
  test_boolean_ = false;
  test_enum_small_ = 0;
  test_enum_ = 0;
  test_string_ = const_cast< ::std::string*>(&_default_test_string_);
  test_bytes_ = const_cast< ::std::string*>(&_default_test_bytes_);
  test_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessOptional::~TestMessOptional() {
  SharedDtor();
}

void TestMessOptional::SharedDtor() {
  if (test_string_ != &_default_test_string_) {
    delete test_string_;
  }
  if (test_bytes_ != &_default_test_bytes_) {
    delete test_bytes_;
  }
  if (this != default_instance_) {
    delete test_message_;
  }
}

const ::google::protobuf::Descriptor* TestMessOptional::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessOptional_descriptor_;
}

const TestMessOptional& TestMessOptional::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessOptional* TestMessOptional::default_instance_ = NULL;

TestMessOptional* TestMessOptional::New() const {
  return new TestMessOptional;
}

void TestMessOptional::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_int32_ = 0;
    test_sint32_ = 0;
    test_sfixed32_ = 0;
    test_int64_ = GOOGLE_LONGLONG(0);
    test_sint64_ = GOOGLE_LONGLONG(0);
    test_sfixed64_ = GOOGLE_LONGLONG(0);
    test_uint32_ = 0u;
    test_fixed32_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    test_uint64_ = GOOGLE_ULONGLONG(0);
    test_fixed64_ = GOOGLE_ULONGLONG(0);
    test_float_ = 0;
    test_double_ = 0;
    test_boolean_ = false;
    test_enum_small_ = 0;
    test_enum_ = 0;
    if (_has_bit(15)) {
      if (test_string_ != &_default_test_string_) {
        test_string_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (test_bytes_ != &_default_test_bytes_) {
        test_bytes_->clear();
      }
    }
    if (_has_bit(17)) {
      if (test_message_ != NULL) test_message_->::foo::SubMess::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessOptional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 test_int32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &test_int32_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_test_sint32;
        break;
      }
      
      // optional sint32 test_sint32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_sint32:
        DO_(::google::protobuf::internal::WireFormatLite::ReadSInt32(
              input, &test_sint32_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_test_sfixed32;
        break;
      }
      
      // optional sfixed32 test_sfixed32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_test_sfixed32:
        DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed32(
              input, &test_sfixed32_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_test_int64;
        break;
      }
      
      // optional int64 test_int64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_int64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &test_int64_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_test_sint64;
        break;
      }
      
      // optional sint64 test_sint64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_sint64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadSInt64(
              input, &test_sint64_));
        _set_bit(4);
        if (input->ExpectTag(49)) goto parse_test_sfixed64;
        break;
      }
      
      // optional sfixed64 test_sfixed64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_test_sfixed64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed64(
              input, &test_sfixed64_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_test_uint32;
        break;
      }
      
      // optional uint32 test_uint32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_uint32:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &test_uint32_));
        _set_bit(6);
        if (input->ExpectTag(69)) goto parse_test_fixed32;
        break;
      }
      
      // optional fixed32 test_fixed32 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_test_fixed32:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed32(
              input, &test_fixed32_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_test_uint64;
        break;
      }
      
      // optional uint64 test_uint64 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_uint64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &test_uint64_));
        _set_bit(8);
        if (input->ExpectTag(81)) goto parse_test_fixed64;
        break;
      }
      
      // optional fixed64 test_fixed64 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_test_fixed64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
              input, &test_fixed64_));
        _set_bit(9);
        if (input->ExpectTag(93)) goto parse_test_float;
        break;
      }
      
      // optional float test_float = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_test_float:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &test_float_));
        _set_bit(10);
        if (input->ExpectTag(97)) goto parse_test_double;
        break;
      }
      
      // optional double test_double = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_test_double:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &test_double_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_test_boolean;
        break;
      }
      
      // optional bool test_boolean = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_boolean:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &test_boolean_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_test_enum_small;
        break;
      }
      
      // optional .foo.TestEnumSmall test_enum_small = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_enum_small:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (foo::TestEnumSmall_IsValid(value)) {
          set_test_enum_small(static_cast< foo::TestEnumSmall >(value));
        } else {
          mutable_unknown_fields()->AddVarint(14, value);
        }
        if (input->ExpectTag(120)) goto parse_test_enum;
        break;
      }
      
      // optional .foo.TestEnum test_enum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test_enum:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (foo::TestEnum_IsValid(value)) {
          set_test_enum(static_cast< foo::TestEnum >(value));
        } else {
          mutable_unknown_fields()->AddVarint(15, value);
        }
        if (input->ExpectTag(130)) goto parse_test_string;
        break;
      }
      
      // optional string test_string = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_string:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test_string().data(), this->test_string().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(138)) goto parse_test_bytes;
        break;
      }
      
      // optional bytes test_bytes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_bytes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_test_bytes()));
        if (input->ExpectTag(146)) goto parse_test_message;
        break;
      }
      
      // optional .foo.SubMess test_message = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_test_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessOptional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessOptional::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 test_int32 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->test_int32(), output);
  }
  
  // optional sint32 test_sint32 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->test_sint32(), output);
  }
  
  // optional sfixed32 test_sfixed32 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->test_sfixed32(), output);
  }
  
  // optional int64 test_int64 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->test_int64(), output);
  }
  
  // optional sint64 test_sint64 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->test_sint64(), output);
  }
  
  // optional sfixed64 test_sfixed64 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->test_sfixed64(), output);
  }
  
  // optional uint32 test_uint32 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->test_uint32(), output);
  }
  
  // optional fixed32 test_fixed32 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->test_fixed32(), output);
  }
  
  // optional uint64 test_uint64 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->test_uint64(), output);
  }
  
  // optional fixed64 test_fixed64 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->test_fixed64(), output);
  }
  
  // optional float test_float = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->test_float(), output);
  }
  
  // optional double test_double = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->test_double(), output);
  }
  
  // optional bool test_boolean = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->test_boolean(), output);
  }
  
  // optional .foo.TestEnumSmall test_enum_small = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->test_enum_small(), output);
  }
  
  // optional .foo.TestEnum test_enum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->test_enum(), output);
  }
  
  // optional string test_string = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_string().data(), this->test_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->test_string(), output);
  }
  
  // optional bytes test_bytes = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->test_bytes(), output);
  }
  
  // optional .foo.SubMess test_message = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->test_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessOptional::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 test_int32 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->test_int32(), target);
  }
  
  // optional sint32 test_sint32 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->test_sint32(), target);
  }
  
  // optional sfixed32 test_sfixed32 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->test_sfixed32(), target);
  }
  
  // optional int64 test_int64 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->test_int64(), target);
  }
  
  // optional sint64 test_sint64 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->test_sint64(), target);
  }
  
  // optional sfixed64 test_sfixed64 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->test_sfixed64(), target);
  }
  
  // optional uint32 test_uint32 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->test_uint32(), target);
  }
  
  // optional fixed32 test_fixed32 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->test_fixed32(), target);
  }
  
  // optional uint64 test_uint64 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->test_uint64(), target);
  }
  
  // optional fixed64 test_fixed64 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->test_fixed64(), target);
  }
  
  // optional float test_float = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->test_float(), target);
  }
  
  // optional double test_double = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->test_double(), target);
  }
  
  // optional bool test_boolean = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->test_boolean(), target);
  }
  
  // optional .foo.TestEnumSmall test_enum_small = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->test_enum_small(), target);
  }
  
  // optional .foo.TestEnum test_enum = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->test_enum(), target);
  }
  
  // optional string test_string = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_string().data(), this->test_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->test_string(), target);
  }
  
  // optional bytes test_bytes = 17;
  if (_has_bit(16)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->test_bytes(), target);
  }
  
  // optional .foo.SubMess test_message = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->test_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessOptional::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 test_int32 = 1;
    if (has_test_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_int32());
    }
    
    // optional sint32 test_sint32 = 2;
    if (has_test_sint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->test_sint32());
    }
    
    // optional sfixed32 test_sfixed32 = 3;
    if (has_test_sfixed32()) {
      total_size += 1 + 4;
    }
    
    // optional int64 test_int64 = 4;
    if (has_test_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->test_int64());
    }
    
    // optional sint64 test_sint64 = 5;
    if (has_test_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test_sint64());
    }
    
    // optional sfixed64 test_sfixed64 = 6;
    if (has_test_sfixed64()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 test_uint32 = 7;
    if (has_test_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_uint32());
    }
    
    // optional fixed32 test_fixed32 = 8;
    if (has_test_fixed32()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 test_uint64 = 9;
    if (has_test_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->test_uint64());
    }
    
    // optional fixed64 test_fixed64 = 10;
    if (has_test_fixed64()) {
      total_size += 1 + 8;
    }
    
    // optional float test_float = 11;
    if (has_test_float()) {
      total_size += 1 + 4;
    }
    
    // optional double test_double = 12;
    if (has_test_double()) {
      total_size += 1 + 8;
    }
    
    // optional bool test_boolean = 13;
    if (has_test_boolean()) {
      total_size += 1 + 1;
    }
    
    // optional .foo.TestEnumSmall test_enum_small = 14;
    if (has_test_enum_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test_enum_small());
    }
    
    // optional .foo.TestEnum test_enum = 15;
    if (has_test_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test_enum());
    }
    
    // optional string test_string = 16;
    if (has_test_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes test_bytes = 17;
    if (has_test_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_bytes());
    }
    
    // optional .foo.SubMess test_message = 18;
    if (has_test_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessOptional::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessOptional* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessOptional*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessOptional::MergeFrom(const TestMessOptional& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test_int32(from.test_int32());
    }
    if (from._has_bit(1)) {
      set_test_sint32(from.test_sint32());
    }
    if (from._has_bit(2)) {
      set_test_sfixed32(from.test_sfixed32());
    }
    if (from._has_bit(3)) {
      set_test_int64(from.test_int64());
    }
    if (from._has_bit(4)) {
      set_test_sint64(from.test_sint64());
    }
    if (from._has_bit(5)) {
      set_test_sfixed64(from.test_sfixed64());
    }
    if (from._has_bit(6)) {
      set_test_uint32(from.test_uint32());
    }
    if (from._has_bit(7)) {
      set_test_fixed32(from.test_fixed32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_test_uint64(from.test_uint64());
    }
    if (from._has_bit(9)) {
      set_test_fixed64(from.test_fixed64());
    }
    if (from._has_bit(10)) {
      set_test_float(from.test_float());
    }
    if (from._has_bit(11)) {
      set_test_double(from.test_double());
    }
    if (from._has_bit(12)) {
      set_test_boolean(from.test_boolean());
    }
    if (from._has_bit(13)) {
      set_test_enum_small(from.test_enum_small());
    }
    if (from._has_bit(14)) {
      set_test_enum(from.test_enum());
    }
    if (from._has_bit(15)) {
      set_test_string(from.test_string());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_test_bytes(from.test_bytes());
    }
    if (from._has_bit(17)) {
      mutable_test_message()->::foo::SubMess::MergeFrom(from.test_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessOptional::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessOptional::CopyFrom(const TestMessOptional& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessOptional::IsInitialized() const {
  
  if (has_test_message()) {
    if (!this->test_message().IsInitialized()) return false;
  }
  return true;
}

void TestMessOptional::Swap(TestMessOptional* other) {
  if (other != this) {
    std::swap(test_int32_, other->test_int32_);
    std::swap(test_sint32_, other->test_sint32_);
    std::swap(test_sfixed32_, other->test_sfixed32_);
    std::swap(test_int64_, other->test_int64_);
    std::swap(test_sint64_, other->test_sint64_);
    std::swap(test_sfixed64_, other->test_sfixed64_);
    std::swap(test_uint32_, other->test_uint32_);
    std::swap(test_fixed32_, other->test_fixed32_);
    std::swap(test_uint64_, other->test_uint64_);
    std::swap(test_fixed64_, other->test_fixed64_);
    std::swap(test_float_, other->test_float_);
    std::swap(test_double_, other->test_double_);
    std::swap(test_boolean_, other->test_boolean_);
    std::swap(test_enum_small_, other->test_enum_small_);
    std::swap(test_enum_, other->test_enum_);
    std::swap(test_string_, other->test_string_);
    std::swap(test_bytes_, other->test_bytes_);
    std::swap(test_message_, other->test_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessOptional::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessOptional_descriptor_;
  metadata.reflection = TestMessOptional_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredInt32::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredInt32::TestMessRequiredInt32() {
  SharedCtor();
}

void TestMessRequiredInt32::InitAsDefaultInstance() {
}

TestMessRequiredInt32::TestMessRequiredInt32(const TestMessRequiredInt32& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredInt32::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredInt32::~TestMessRequiredInt32() {
  SharedDtor();
}

void TestMessRequiredInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredInt32_descriptor_;
}

const TestMessRequiredInt32& TestMessRequiredInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredInt32* TestMessRequiredInt32::default_instance_ = NULL;

TestMessRequiredInt32* TestMessRequiredInt32::New() const {
  return new TestMessRequiredInt32;
}

void TestMessRequiredInt32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 test = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredInt32::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 test = 42;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 test = 42;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredInt32::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 test = 42;
    if (has_test()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredInt32::MergeFrom(const TestMessRequiredInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredInt32::CopyFrom(const TestMessRequiredInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredInt32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredInt32::Swap(TestMessRequiredInt32* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredInt32_descriptor_;
  metadata.reflection = TestMessRequiredInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredSInt32::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredSInt32::TestMessRequiredSInt32() {
  SharedCtor();
}

void TestMessRequiredSInt32::InitAsDefaultInstance() {
}

TestMessRequiredSInt32::TestMessRequiredSInt32(const TestMessRequiredSInt32& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredSInt32::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredSInt32::~TestMessRequiredSInt32() {
  SharedDtor();
}

void TestMessRequiredSInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredSInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredSInt32_descriptor_;
}

const TestMessRequiredSInt32& TestMessRequiredSInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredSInt32* TestMessRequiredSInt32::default_instance_ = NULL;

TestMessRequiredSInt32* TestMessRequiredSInt32::New() const {
  return new TestMessRequiredSInt32;
}

void TestMessRequiredSInt32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredSInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 test = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadSInt32(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredSInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredSInt32::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required sint32 test = 43;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(43, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredSInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 test = 43;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(43, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredSInt32::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 test = 43;
    if (has_test()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredSInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredSInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredSInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredSInt32::MergeFrom(const TestMessRequiredSInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredSInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSInt32::CopyFrom(const TestMessRequiredSInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSInt32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredSInt32::Swap(TestMessRequiredSInt32* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredSInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredSInt32_descriptor_;
  metadata.reflection = TestMessRequiredSInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredSFixed32::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredSFixed32::TestMessRequiredSFixed32() {
  SharedCtor();
}

void TestMessRequiredSFixed32::InitAsDefaultInstance() {
}

TestMessRequiredSFixed32::TestMessRequiredSFixed32(const TestMessRequiredSFixed32& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredSFixed32::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredSFixed32::~TestMessRequiredSFixed32() {
  SharedDtor();
}

void TestMessRequiredSFixed32::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredSFixed32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredSFixed32_descriptor_;
}

const TestMessRequiredSFixed32& TestMessRequiredSFixed32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredSFixed32* TestMessRequiredSFixed32::default_instance_ = NULL;

TestMessRequiredSFixed32* TestMessRequiredSFixed32::New() const {
  return new TestMessRequiredSFixed32;
}

void TestMessRequiredSFixed32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredSFixed32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 test = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed32(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredSFixed32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredSFixed32::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required sfixed32 test = 100;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(100, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredSFixed32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 test = 100;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(100, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredSFixed32::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 test = 100;
    if (has_test()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredSFixed32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredSFixed32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredSFixed32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredSFixed32::MergeFrom(const TestMessRequiredSFixed32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredSFixed32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSFixed32::CopyFrom(const TestMessRequiredSFixed32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSFixed32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredSFixed32::Swap(TestMessRequiredSFixed32* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredSFixed32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredSFixed32_descriptor_;
  metadata.reflection = TestMessRequiredSFixed32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredInt64::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredInt64::TestMessRequiredInt64() {
  SharedCtor();
}

void TestMessRequiredInt64::InitAsDefaultInstance() {
}

TestMessRequiredInt64::TestMessRequiredInt64(const TestMessRequiredInt64& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredInt64::SharedCtor() {
  _cached_size_ = 0;
  test_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredInt64::~TestMessRequiredInt64() {
  SharedDtor();
}

void TestMessRequiredInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredInt64_descriptor_;
}

const TestMessRequiredInt64& TestMessRequiredInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredInt64* TestMessRequiredInt64::default_instance_ = NULL;

TestMessRequiredInt64* TestMessRequiredInt64::New() const {
  return new TestMessRequiredInt64;
}

void TestMessRequiredInt64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredInt64::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredInt64::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredInt64::MergeFrom(const TestMessRequiredInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredInt64::CopyFrom(const TestMessRequiredInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredInt64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredInt64::Swap(TestMessRequiredInt64* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredInt64_descriptor_;
  metadata.reflection = TestMessRequiredInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredSInt64::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredSInt64::TestMessRequiredSInt64() {
  SharedCtor();
}

void TestMessRequiredSInt64::InitAsDefaultInstance() {
}

TestMessRequiredSInt64::TestMessRequiredSInt64(const TestMessRequiredSInt64& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredSInt64::SharedCtor() {
  _cached_size_ = 0;
  test_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredSInt64::~TestMessRequiredSInt64() {
  SharedDtor();
}

void TestMessRequiredSInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredSInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredSInt64_descriptor_;
}

const TestMessRequiredSInt64& TestMessRequiredSInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredSInt64* TestMessRequiredSInt64::default_instance_ = NULL;

TestMessRequiredSInt64* TestMessRequiredSInt64::New() const {
  return new TestMessRequiredSInt64;
}

void TestMessRequiredSInt64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredSInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 test = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadSInt64(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredSInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredSInt64::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required sint64 test = 11;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredSInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 test = 11;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredSInt64::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 test = 11;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredSInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredSInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredSInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredSInt64::MergeFrom(const TestMessRequiredSInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredSInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSInt64::CopyFrom(const TestMessRequiredSInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSInt64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredSInt64::Swap(TestMessRequiredSInt64* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredSInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredSInt64_descriptor_;
  metadata.reflection = TestMessRequiredSInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredSFixed64::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredSFixed64::TestMessRequiredSFixed64() {
  SharedCtor();
}

void TestMessRequiredSFixed64::InitAsDefaultInstance() {
}

TestMessRequiredSFixed64::TestMessRequiredSFixed64(const TestMessRequiredSFixed64& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredSFixed64::SharedCtor() {
  _cached_size_ = 0;
  test_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredSFixed64::~TestMessRequiredSFixed64() {
  SharedDtor();
}

void TestMessRequiredSFixed64::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredSFixed64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredSFixed64_descriptor_;
}

const TestMessRequiredSFixed64& TestMessRequiredSFixed64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredSFixed64* TestMessRequiredSFixed64::default_instance_ = NULL;

TestMessRequiredSFixed64* TestMessRequiredSFixed64::New() const {
  return new TestMessRequiredSFixed64;
}

void TestMessRequiredSFixed64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredSFixed64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 test = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadSFixed64(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredSFixed64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredSFixed64::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required sfixed64 test = 12;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredSFixed64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed64 test = 12;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredSFixed64::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed64 test = 12;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredSFixed64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredSFixed64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredSFixed64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredSFixed64::MergeFrom(const TestMessRequiredSFixed64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredSFixed64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSFixed64::CopyFrom(const TestMessRequiredSFixed64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSFixed64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredSFixed64::Swap(TestMessRequiredSFixed64* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredSFixed64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredSFixed64_descriptor_;
  metadata.reflection = TestMessRequiredSFixed64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredUInt32::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredUInt32::TestMessRequiredUInt32() {
  SharedCtor();
}

void TestMessRequiredUInt32::InitAsDefaultInstance() {
}

TestMessRequiredUInt32::TestMessRequiredUInt32(const TestMessRequiredUInt32& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredUInt32::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredUInt32::~TestMessRequiredUInt32() {
  SharedDtor();
}

void TestMessRequiredUInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredUInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredUInt32_descriptor_;
}

const TestMessRequiredUInt32& TestMessRequiredUInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredUInt32* TestMessRequiredUInt32::default_instance_ = NULL;

TestMessRequiredUInt32* TestMessRequiredUInt32::New() const {
  return new TestMessRequiredUInt32;
}

void TestMessRequiredUInt32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredUInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredUInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredUInt32::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredUInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredUInt32::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredUInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredUInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredUInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredUInt32::MergeFrom(const TestMessRequiredUInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredUInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredUInt32::CopyFrom(const TestMessRequiredUInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredUInt32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredUInt32::Swap(TestMessRequiredUInt32* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredUInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredUInt32_descriptor_;
  metadata.reflection = TestMessRequiredUInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredFixed32::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredFixed32::TestMessRequiredFixed32() {
  SharedCtor();
}

void TestMessRequiredFixed32::InitAsDefaultInstance() {
}

TestMessRequiredFixed32::TestMessRequiredFixed32(const TestMessRequiredFixed32& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredFixed32::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredFixed32::~TestMessRequiredFixed32() {
  SharedDtor();
}

void TestMessRequiredFixed32::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredFixed32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredFixed32_descriptor_;
}

const TestMessRequiredFixed32& TestMessRequiredFixed32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredFixed32* TestMessRequiredFixed32::default_instance_ = NULL;

TestMessRequiredFixed32* TestMessRequiredFixed32::New() const {
  return new TestMessRequiredFixed32;
}

void TestMessRequiredFixed32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredFixed32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed32(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredFixed32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredFixed32::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required fixed32 test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredFixed32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredFixed32::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 test = 1;
    if (has_test()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredFixed32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredFixed32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredFixed32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredFixed32::MergeFrom(const TestMessRequiredFixed32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredFixed32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredFixed32::CopyFrom(const TestMessRequiredFixed32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredFixed32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredFixed32::Swap(TestMessRequiredFixed32* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredFixed32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredFixed32_descriptor_;
  metadata.reflection = TestMessRequiredFixed32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredUInt64::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredUInt64::TestMessRequiredUInt64() {
  SharedCtor();
}

void TestMessRequiredUInt64::InitAsDefaultInstance() {
}

TestMessRequiredUInt64::TestMessRequiredUInt64(const TestMessRequiredUInt64& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredUInt64::SharedCtor() {
  _cached_size_ = 0;
  test_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredUInt64::~TestMessRequiredUInt64() {
  SharedDtor();
}

void TestMessRequiredUInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredUInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredUInt64_descriptor_;
}

const TestMessRequiredUInt64& TestMessRequiredUInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredUInt64* TestMessRequiredUInt64::default_instance_ = NULL;

TestMessRequiredUInt64* TestMessRequiredUInt64::New() const {
  return new TestMessRequiredUInt64;
}

void TestMessRequiredUInt64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredUInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredUInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredUInt64::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredUInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredUInt64::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredUInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredUInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredUInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredUInt64::MergeFrom(const TestMessRequiredUInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredUInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredUInt64::CopyFrom(const TestMessRequiredUInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredUInt64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredUInt64::Swap(TestMessRequiredUInt64* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredUInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredUInt64_descriptor_;
  metadata.reflection = TestMessRequiredUInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredFixed64::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredFixed64::TestMessRequiredFixed64() {
  SharedCtor();
}

void TestMessRequiredFixed64::InitAsDefaultInstance() {
}

TestMessRequiredFixed64::TestMessRequiredFixed64(const TestMessRequiredFixed64& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredFixed64::SharedCtor() {
  _cached_size_ = 0;
  test_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredFixed64::~TestMessRequiredFixed64() {
  SharedDtor();
}

void TestMessRequiredFixed64::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredFixed64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredFixed64_descriptor_;
}

const TestMessRequiredFixed64& TestMessRequiredFixed64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredFixed64* TestMessRequiredFixed64::default_instance_ = NULL;

TestMessRequiredFixed64* TestMessRequiredFixed64::New() const {
  return new TestMessRequiredFixed64;
}

void TestMessRequiredFixed64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredFixed64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredFixed64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredFixed64::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required fixed64 test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredFixed64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredFixed64::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredFixed64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredFixed64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredFixed64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredFixed64::MergeFrom(const TestMessRequiredFixed64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredFixed64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredFixed64::CopyFrom(const TestMessRequiredFixed64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredFixed64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredFixed64::Swap(TestMessRequiredFixed64* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredFixed64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredFixed64_descriptor_;
  metadata.reflection = TestMessRequiredFixed64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredFloat::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredFloat::TestMessRequiredFloat() {
  SharedCtor();
}

void TestMessRequiredFloat::InitAsDefaultInstance() {
}

TestMessRequiredFloat::TestMessRequiredFloat(const TestMessRequiredFloat& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredFloat::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredFloat::~TestMessRequiredFloat() {
  SharedDtor();
}

void TestMessRequiredFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredFloat_descriptor_;
}

const TestMessRequiredFloat& TestMessRequiredFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredFloat* TestMessRequiredFloat::default_instance_ = NULL;

TestMessRequiredFloat* TestMessRequiredFloat::New() const {
  return new TestMessRequiredFloat;
}

void TestMessRequiredFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredFloat::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredFloat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float test = 1;
    if (has_test()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredFloat::MergeFrom(const TestMessRequiredFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredFloat::CopyFrom(const TestMessRequiredFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredFloat::Swap(TestMessRequiredFloat* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredFloat_descriptor_;
  metadata.reflection = TestMessRequiredFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredDouble::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredDouble::TestMessRequiredDouble() {
  SharedCtor();
}

void TestMessRequiredDouble::InitAsDefaultInstance() {
}

TestMessRequiredDouble::TestMessRequiredDouble(const TestMessRequiredDouble& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredDouble::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredDouble::~TestMessRequiredDouble() {
  SharedDtor();
}

void TestMessRequiredDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredDouble_descriptor_;
}

const TestMessRequiredDouble& TestMessRequiredDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredDouble* TestMessRequiredDouble::default_instance_ = NULL;

TestMessRequiredDouble* TestMessRequiredDouble::New() const {
  return new TestMessRequiredDouble;
}

void TestMessRequiredDouble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredDouble::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredDouble::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredDouble::MergeFrom(const TestMessRequiredDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredDouble::CopyFrom(const TestMessRequiredDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredDouble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredDouble::Swap(TestMessRequiredDouble* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredDouble_descriptor_;
  metadata.reflection = TestMessRequiredDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredBool::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredBool::TestMessRequiredBool() {
  SharedCtor();
}

void TestMessRequiredBool::InitAsDefaultInstance() {
}

TestMessRequiredBool::TestMessRequiredBool(const TestMessRequiredBool& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredBool::SharedCtor() {
  _cached_size_ = 0;
  test_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredBool::~TestMessRequiredBool() {
  SharedDtor();
}

void TestMessRequiredBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredBool_descriptor_;
}

const TestMessRequiredBool& TestMessRequiredBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredBool* TestMessRequiredBool::default_instance_ = NULL;

TestMessRequiredBool* TestMessRequiredBool::New() const {
  return new TestMessRequiredBool;
}

void TestMessRequiredBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &test_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredBool::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bool test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredBool::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool test = 1;
    if (has_test()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredBool::MergeFrom(const TestMessRequiredBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredBool::CopyFrom(const TestMessRequiredBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredBool::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredBool::Swap(TestMessRequiredBool* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredBool_descriptor_;
  metadata.reflection = TestMessRequiredBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredEnum::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredEnum::TestMessRequiredEnum() {
  SharedCtor();
}

void TestMessRequiredEnum::InitAsDefaultInstance() {
}

TestMessRequiredEnum::TestMessRequiredEnum(const TestMessRequiredEnum& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredEnum::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredEnum::~TestMessRequiredEnum() {
  SharedDtor();
}

void TestMessRequiredEnum::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredEnum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredEnum_descriptor_;
}

const TestMessRequiredEnum& TestMessRequiredEnum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredEnum* TestMessRequiredEnum::default_instance_ = NULL;

TestMessRequiredEnum* TestMessRequiredEnum::New() const {
  return new TestMessRequiredEnum;
}

void TestMessRequiredEnum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .foo.TestEnum test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (foo::TestEnum_IsValid(value)) {
          set_test(static_cast< foo::TestEnum >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredEnum::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .foo.TestEnum test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredEnum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .foo.TestEnum test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredEnum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .foo.TestEnum test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredEnum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredEnum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredEnum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredEnum::MergeFrom(const TestMessRequiredEnum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredEnum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredEnum::CopyFrom(const TestMessRequiredEnum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredEnum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredEnum::Swap(TestMessRequiredEnum* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredEnum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredEnum_descriptor_;
  metadata.reflection = TestMessRequiredEnum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredEnumSmall::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredEnumSmall::TestMessRequiredEnumSmall() {
  SharedCtor();
}

void TestMessRequiredEnumSmall::InitAsDefaultInstance() {
}

TestMessRequiredEnumSmall::TestMessRequiredEnumSmall(const TestMessRequiredEnumSmall& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredEnumSmall::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredEnumSmall::~TestMessRequiredEnumSmall() {
  SharedDtor();
}

void TestMessRequiredEnumSmall::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredEnumSmall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredEnumSmall_descriptor_;
}

const TestMessRequiredEnumSmall& TestMessRequiredEnumSmall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredEnumSmall* TestMessRequiredEnumSmall::default_instance_ = NULL;

TestMessRequiredEnumSmall* TestMessRequiredEnumSmall::New() const {
  return new TestMessRequiredEnumSmall;
}

void TestMessRequiredEnumSmall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredEnumSmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .foo.TestEnumSmall test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (foo::TestEnumSmall_IsValid(value)) {
          set_test(static_cast< foo::TestEnumSmall >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredEnumSmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredEnumSmall::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .foo.TestEnumSmall test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredEnumSmall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .foo.TestEnumSmall test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredEnumSmall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .foo.TestEnumSmall test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredEnumSmall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredEnumSmall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredEnumSmall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredEnumSmall::MergeFrom(const TestMessRequiredEnumSmall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredEnumSmall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredEnumSmall::CopyFrom(const TestMessRequiredEnumSmall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredEnumSmall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredEnumSmall::Swap(TestMessRequiredEnumSmall* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredEnumSmall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredEnumSmall_descriptor_;
  metadata.reflection = TestMessRequiredEnumSmall_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestMessRequiredString::_default_test_;
#ifndef _MSC_VER
const int TestMessRequiredString::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredString::TestMessRequiredString() {
  SharedCtor();
}

void TestMessRequiredString::InitAsDefaultInstance() {
}

TestMessRequiredString::TestMessRequiredString(const TestMessRequiredString& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredString::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredString::~TestMessRequiredString() {
  SharedDtor();
}

void TestMessRequiredString::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredString_descriptor_;
}

const TestMessRequiredString& TestMessRequiredString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredString* TestMessRequiredString::default_instance_ = NULL;

TestMessRequiredString* TestMessRequiredString::New() const {
  return new TestMessRequiredString;
}

void TestMessRequiredString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_test()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->test().data(), this->test().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredString::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredString::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredString::MergeFrom(const TestMessRequiredString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredString::CopyFrom(const TestMessRequiredString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredString::Swap(TestMessRequiredString* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredString_descriptor_;
  metadata.reflection = TestMessRequiredString_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TestMessRequiredBytes::_default_test_;
#ifndef _MSC_VER
const int TestMessRequiredBytes::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredBytes::TestMessRequiredBytes() {
  SharedCtor();
}

void TestMessRequiredBytes::InitAsDefaultInstance() {
}

TestMessRequiredBytes::TestMessRequiredBytes(const TestMessRequiredBytes& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredBytes::SharedCtor() {
  _cached_size_ = 0;
  test_ = const_cast< ::std::string*>(&_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredBytes::~TestMessRequiredBytes() {
  SharedDtor();
}

void TestMessRequiredBytes::SharedDtor() {
  if (test_ != &_default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredBytes_descriptor_;
}

const TestMessRequiredBytes& TestMessRequiredBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredBytes* TestMessRequiredBytes::default_instance_ = NULL;

TestMessRequiredBytes* TestMessRequiredBytes::New() const {
  return new TestMessRequiredBytes;
}

void TestMessRequiredBytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != &_default_test_) {
        test_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_test()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredBytes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredBytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes test = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredBytes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredBytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredBytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredBytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredBytes::MergeFrom(const TestMessRequiredBytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredBytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredBytes::CopyFrom(const TestMessRequiredBytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestMessRequiredBytes::Swap(TestMessRequiredBytes* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredBytes_descriptor_;
  metadata.reflection = TestMessRequiredBytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMessRequiredMessage::kTestFieldNumber;
#endif  // !_MSC_VER

TestMessRequiredMessage::TestMessRequiredMessage() {
  SharedCtor();
}

void TestMessRequiredMessage::InitAsDefaultInstance() {
  test_ = const_cast< ::foo::SubMess*>(&::foo::SubMess::default_instance());
}

TestMessRequiredMessage::TestMessRequiredMessage(const TestMessRequiredMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestMessRequiredMessage::SharedCtor() {
  _cached_size_ = 0;
  test_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessRequiredMessage::~TestMessRequiredMessage() {
  SharedDtor();
}

void TestMessRequiredMessage::SharedDtor() {
  if (this != default_instance_) {
    delete test_;
  }
}

const ::google::protobuf::Descriptor* TestMessRequiredMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessRequiredMessage_descriptor_;
}

const TestMessRequiredMessage& TestMessRequiredMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

TestMessRequiredMessage* TestMessRequiredMessage::default_instance_ = NULL;

TestMessRequiredMessage* TestMessRequiredMessage::New() const {
  return new TestMessRequiredMessage;
}

void TestMessRequiredMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (test_ != NULL) test_->::foo::SubMess::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessRequiredMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .foo.SubMess test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_test()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMessRequiredMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestMessRequiredMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .foo.SubMess test = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMessRequiredMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .foo.SubMess test = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMessRequiredMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .foo.SubMess test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestMessRequiredMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessRequiredMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessRequiredMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessRequiredMessage::MergeFrom(const TestMessRequiredMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_test()->::foo::SubMess::MergeFrom(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessRequiredMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredMessage::CopyFrom(const TestMessRequiredMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_test()) {
    if (!this->test().IsInitialized()) return false;
  }
  return true;
}

void TestMessRequiredMessage::Swap(TestMessRequiredMessage* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessRequiredMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessRequiredMessage_descriptor_;
  metadata.reflection = TestMessRequiredMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMess::EmptyMess() {
  SharedCtor();
}

void EmptyMess::InitAsDefaultInstance() {
}

EmptyMess::EmptyMess(const EmptyMess& from) {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMess::~EmptyMess() {
  SharedDtor();
}

void EmptyMess::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EmptyMess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMess_descriptor_;
}

const EmptyMess& EmptyMess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

EmptyMess* EmptyMess::default_instance_ = NULL;

EmptyMess* EmptyMess::New() const {
  return new EmptyMess;
}

void EmptyMess::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    EmptyMess::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMess::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EmptyMess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMess::MergeFrom(const EmptyMess& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMess::CopyFrom(const EmptyMess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMess::IsInitialized() const {
  
  return true;
}

void EmptyMess::Swap(EmptyMess* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMess_descriptor_;
  metadata.reflection = EmptyMess_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DefaultRequiredValues::_default_v_string_("hi mom\n");
const ::std::string DefaultRequiredValues::_default_v_bytes_("a \000 character");
#ifndef _MSC_VER
const int DefaultRequiredValues::kVInt32FieldNumber;
const int DefaultRequiredValues::kVUint32FieldNumber;
const int DefaultRequiredValues::kVInt64FieldNumber;
const int DefaultRequiredValues::kVUint64FieldNumber;
const int DefaultRequiredValues::kVFloatFieldNumber;
const int DefaultRequiredValues::kVDoubleFieldNumber;
const int DefaultRequiredValues::kVStringFieldNumber;
const int DefaultRequiredValues::kVBytesFieldNumber;
#endif  // !_MSC_VER

DefaultRequiredValues::DefaultRequiredValues() {
  SharedCtor();
}

void DefaultRequiredValues::InitAsDefaultInstance() {
}

DefaultRequiredValues::DefaultRequiredValues(const DefaultRequiredValues& from) {
  SharedCtor();
  MergeFrom(from);
}

void DefaultRequiredValues::SharedCtor() {
  _cached_size_ = 0;
  v_int32_ = -42;
  v_uint32_ = 666u;
  v_int64_ = 100000;
  v_uint64_ = 100001u;
  v_float_ = 2.5f;
  v_double_ = 4.5;
  v_string_ = const_cast< ::std::string*>(&_default_v_string_);
  v_bytes_ = const_cast< ::std::string*>(&_default_v_bytes_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultRequiredValues::~DefaultRequiredValues() {
  SharedDtor();
}

void DefaultRequiredValues::SharedDtor() {
  if (v_string_ != &_default_v_string_) {
    delete v_string_;
  }
  if (v_bytes_ != &_default_v_bytes_) {
    delete v_bytes_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DefaultRequiredValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultRequiredValues_descriptor_;
}

const DefaultRequiredValues& DefaultRequiredValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

DefaultRequiredValues* DefaultRequiredValues::default_instance_ = NULL;

DefaultRequiredValues* DefaultRequiredValues::New() const {
  return new DefaultRequiredValues;
}

void DefaultRequiredValues::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_int32_ = -42;
    v_uint32_ = 666u;
    v_int64_ = 100000;
    v_uint64_ = 100001u;
    v_float_ = 2.5f;
    v_double_ = 4.5;
    if (_has_bit(6)) {
      if (v_string_ != &_default_v_string_) {
        v_string_->assign(_default_v_string_);
      }
    }
    if (_has_bit(7)) {
      if (v_bytes_ != &_default_v_bytes_) {
        v_bytes_->assign(_default_v_bytes_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultRequiredValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 v_int32 = 1 [default = -42];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v_int32_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_v_uint32;
        break;
      }
      
      // required uint32 v_uint32 = 2 [default = 666];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_uint32:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &v_uint32_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_v_int64;
        break;
      }
      
      // required int32 v_int64 = 3 [default = 100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_int64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v_int64_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_v_uint64;
        break;
      }
      
      // required uint32 v_uint64 = 4 [default = 100001];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_uint64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &v_uint64_));
        _set_bit(3);
        if (input->ExpectTag(45)) goto parse_v_float;
        break;
      }
      
      // required float v_float = 5 [default = 2.5];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_v_float:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &v_float_));
        _set_bit(4);
        if (input->ExpectTag(49)) goto parse_v_double;
        break;
      }
      
      // required double v_double = 6 [default = 4.5];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_v_double:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &v_double_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_v_string;
        break;
      }
      
      // required string v_string = 7 [default = "hi mom\n"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_v_string:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_v_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->v_string().data(), this->v_string().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_v_bytes;
        break;
      }
      
      // required bytes v_bytes = 8 [default = "a \000 character"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_v_bytes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_v_bytes()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultRequiredValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DefaultRequiredValues::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 v_int32 = 1 [default = -42];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v_int32(), output);
  }
  
  // required uint32 v_uint32 = 2 [default = 666];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->v_uint32(), output);
  }
  
  // required int32 v_int64 = 3 [default = 100000];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v_int64(), output);
  }
  
  // required uint32 v_uint64 = 4 [default = 100001];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->v_uint64(), output);
  }
  
  // required float v_float = 5 [default = 2.5];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_float(), output);
  }
  
  // required double v_double = 6 [default = 4.5];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v_double(), output);
  }
  
  // required string v_string = 7 [default = "hi mom\n"];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_string().data(), this->v_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->v_string(), output);
  }
  
  // required bytes v_bytes = 8 [default = "a \000 character"];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->v_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultRequiredValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 v_int32 = 1 [default = -42];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v_int32(), target);
  }
  
  // required uint32 v_uint32 = 2 [default = 666];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->v_uint32(), target);
  }
  
  // required int32 v_int64 = 3 [default = 100000];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v_int64(), target);
  }
  
  // required uint32 v_uint64 = 4 [default = 100001];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->v_uint64(), target);
  }
  
  // required float v_float = 5 [default = 2.5];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_float(), target);
  }
  
  // required double v_double = 6 [default = 4.5];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->v_double(), target);
  }
  
  // required string v_string = 7 [default = "hi mom\n"];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_string().data(), this->v_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->v_string(), target);
  }
  
  // required bytes v_bytes = 8 [default = "a \000 character"];
  if (_has_bit(7)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->v_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultRequiredValues::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 v_int32 = 1 [default = -42];
    if (has_v_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_int32());
    }
    
    // required uint32 v_uint32 = 2 [default = 666];
    if (has_v_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint32());
    }
    
    // required int32 v_int64 = 3 [default = 100000];
    if (has_v_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_int64());
    }
    
    // required uint32 v_uint64 = 4 [default = 100001];
    if (has_v_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint64());
    }
    
    // required float v_float = 5 [default = 2.5];
    if (has_v_float()) {
      total_size += 1 + 4;
    }
    
    // required double v_double = 6 [default = 4.5];
    if (has_v_double()) {
      total_size += 1 + 8;
    }
    
    // required string v_string = 7 [default = "hi mom\n"];
    if (has_v_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_string());
    }
    
    // required bytes v_bytes = 8 [default = "a \000 character"];
    if (has_v_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DefaultRequiredValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultRequiredValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultRequiredValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultRequiredValues::MergeFrom(const DefaultRequiredValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_v_int32(from.v_int32());
    }
    if (from._has_bit(1)) {
      set_v_uint32(from.v_uint32());
    }
    if (from._has_bit(2)) {
      set_v_int64(from.v_int64());
    }
    if (from._has_bit(3)) {
      set_v_uint64(from.v_uint64());
    }
    if (from._has_bit(4)) {
      set_v_float(from.v_float());
    }
    if (from._has_bit(5)) {
      set_v_double(from.v_double());
    }
    if (from._has_bit(6)) {
      set_v_string(from.v_string());
    }
    if (from._has_bit(7)) {
      set_v_bytes(from.v_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultRequiredValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRequiredValues::CopyFrom(const DefaultRequiredValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRequiredValues::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void DefaultRequiredValues::Swap(DefaultRequiredValues* other) {
  if (other != this) {
    std::swap(v_int32_, other->v_int32_);
    std::swap(v_uint32_, other->v_uint32_);
    std::swap(v_int64_, other->v_int64_);
    std::swap(v_uint64_, other->v_uint64_);
    std::swap(v_float_, other->v_float_);
    std::swap(v_double_, other->v_double_);
    std::swap(v_string_, other->v_string_);
    std::swap(v_bytes_, other->v_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultRequiredValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultRequiredValues_descriptor_;
  metadata.reflection = DefaultRequiredValues_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DefaultOptionalValues::_default_v_string_("hi mom\n");
const ::std::string DefaultOptionalValues::_default_v_bytes_("a \000 character");
#ifndef _MSC_VER
const int DefaultOptionalValues::kVInt32FieldNumber;
const int DefaultOptionalValues::kVUint32FieldNumber;
const int DefaultOptionalValues::kVInt64FieldNumber;
const int DefaultOptionalValues::kVUint64FieldNumber;
const int DefaultOptionalValues::kVFloatFieldNumber;
const int DefaultOptionalValues::kVDoubleFieldNumber;
const int DefaultOptionalValues::kVStringFieldNumber;
const int DefaultOptionalValues::kVBytesFieldNumber;
#endif  // !_MSC_VER

DefaultOptionalValues::DefaultOptionalValues() {
  SharedCtor();
}

void DefaultOptionalValues::InitAsDefaultInstance() {
}

DefaultOptionalValues::DefaultOptionalValues(const DefaultOptionalValues& from) {
  SharedCtor();
  MergeFrom(from);
}

void DefaultOptionalValues::SharedCtor() {
  _cached_size_ = 0;
  v_int32_ = -42;
  v_uint32_ = 666u;
  v_int64_ = 100000;
  v_uint64_ = 100001u;
  v_float_ = 2.5f;
  v_double_ = 4.5;
  v_string_ = const_cast< ::std::string*>(&_default_v_string_);
  v_bytes_ = const_cast< ::std::string*>(&_default_v_bytes_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultOptionalValues::~DefaultOptionalValues() {
  SharedDtor();
}

void DefaultOptionalValues::SharedDtor() {
  if (v_string_ != &_default_v_string_) {
    delete v_string_;
  }
  if (v_bytes_ != &_default_v_bytes_) {
    delete v_bytes_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DefaultOptionalValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultOptionalValues_descriptor_;
}

const DefaultOptionalValues& DefaultOptionalValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

DefaultOptionalValues* DefaultOptionalValues::default_instance_ = NULL;

DefaultOptionalValues* DefaultOptionalValues::New() const {
  return new DefaultOptionalValues;
}

void DefaultOptionalValues::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_int32_ = -42;
    v_uint32_ = 666u;
    v_int64_ = 100000;
    v_uint64_ = 100001u;
    v_float_ = 2.5f;
    v_double_ = 4.5;
    if (_has_bit(6)) {
      if (v_string_ != &_default_v_string_) {
        v_string_->assign(_default_v_string_);
      }
    }
    if (_has_bit(7)) {
      if (v_bytes_ != &_default_v_bytes_) {
        v_bytes_->assign(_default_v_bytes_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultOptionalValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 v_int32 = 1 [default = -42];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v_int32_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_v_uint32;
        break;
      }
      
      // optional uint32 v_uint32 = 2 [default = 666];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_uint32:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &v_uint32_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_v_int64;
        break;
      }
      
      // optional int32 v_int64 = 3 [default = 100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_int64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v_int64_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_v_uint64;
        break;
      }
      
      // optional uint32 v_uint64 = 4 [default = 100001];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_uint64:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &v_uint64_));
        _set_bit(3);
        if (input->ExpectTag(45)) goto parse_v_float;
        break;
      }
      
      // optional float v_float = 5 [default = 2.5];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_v_float:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &v_float_));
        _set_bit(4);
        if (input->ExpectTag(49)) goto parse_v_double;
        break;
      }
      
      // optional double v_double = 6 [default = 4.5];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_v_double:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &v_double_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_v_string;
        break;
      }
      
      // optional string v_string = 7 [default = "hi mom\n"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_v_string:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_v_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->v_string().data(), this->v_string().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(66)) goto parse_v_bytes;
        break;
      }
      
      // optional bytes v_bytes = 8 [default = "a \000 character"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_v_bytes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_v_bytes()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultOptionalValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DefaultOptionalValues::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 v_int32 = 1 [default = -42];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v_int32(), output);
  }
  
  // optional uint32 v_uint32 = 2 [default = 666];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->v_uint32(), output);
  }
  
  // optional int32 v_int64 = 3 [default = 100000];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v_int64(), output);
  }
  
  // optional uint32 v_uint64 = 4 [default = 100001];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->v_uint64(), output);
  }
  
  // optional float v_float = 5 [default = 2.5];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_float(), output);
  }
  
  // optional double v_double = 6 [default = 4.5];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v_double(), output);
  }
  
  // optional string v_string = 7 [default = "hi mom\n"];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_string().data(), this->v_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->v_string(), output);
  }
  
  // optional bytes v_bytes = 8 [default = "a \000 character"];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->v_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultOptionalValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 v_int32 = 1 [default = -42];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v_int32(), target);
  }
  
  // optional uint32 v_uint32 = 2 [default = 666];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->v_uint32(), target);
  }
  
  // optional int32 v_int64 = 3 [default = 100000];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v_int64(), target);
  }
  
  // optional uint32 v_uint64 = 4 [default = 100001];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->v_uint64(), target);
  }
  
  // optional float v_float = 5 [default = 2.5];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_float(), target);
  }
  
  // optional double v_double = 6 [default = 4.5];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->v_double(), target);
  }
  
  // optional string v_string = 7 [default = "hi mom\n"];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_string().data(), this->v_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->v_string(), target);
  }
  
  // optional bytes v_bytes = 8 [default = "a \000 character"];
  if (_has_bit(7)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->v_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultOptionalValues::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 v_int32 = 1 [default = -42];
    if (has_v_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_int32());
    }
    
    // optional uint32 v_uint32 = 2 [default = 666];
    if (has_v_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint32());
    }
    
    // optional int32 v_int64 = 3 [default = 100000];
    if (has_v_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_int64());
    }
    
    // optional uint32 v_uint64 = 4 [default = 100001];
    if (has_v_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint64());
    }
    
    // optional float v_float = 5 [default = 2.5];
    if (has_v_float()) {
      total_size += 1 + 4;
    }
    
    // optional double v_double = 6 [default = 4.5];
    if (has_v_double()) {
      total_size += 1 + 8;
    }
    
    // optional string v_string = 7 [default = "hi mom\n"];
    if (has_v_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_string());
    }
    
    // optional bytes v_bytes = 8 [default = "a \000 character"];
    if (has_v_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DefaultOptionalValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultOptionalValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultOptionalValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultOptionalValues::MergeFrom(const DefaultOptionalValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_v_int32(from.v_int32());
    }
    if (from._has_bit(1)) {
      set_v_uint32(from.v_uint32());
    }
    if (from._has_bit(2)) {
      set_v_int64(from.v_int64());
    }
    if (from._has_bit(3)) {
      set_v_uint64(from.v_uint64());
    }
    if (from._has_bit(4)) {
      set_v_float(from.v_float());
    }
    if (from._has_bit(5)) {
      set_v_double(from.v_double());
    }
    if (from._has_bit(6)) {
      set_v_string(from.v_string());
    }
    if (from._has_bit(7)) {
      set_v_bytes(from.v_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultOptionalValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultOptionalValues::CopyFrom(const DefaultOptionalValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultOptionalValues::IsInitialized() const {
  
  return true;
}

void DefaultOptionalValues::Swap(DefaultOptionalValues* other) {
  if (other != this) {
    std::swap(v_int32_, other->v_int32_);
    std::swap(v_uint32_, other->v_uint32_);
    std::swap(v_int64_, other->v_int64_);
    std::swap(v_uint64_, other->v_uint64_);
    std::swap(v_float_, other->v_float_);
    std::swap(v_double_, other->v_double_);
    std::swap(v_string_, other->v_string_);
    std::swap(v_bytes_, other->v_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultOptionalValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultOptionalValues_descriptor_;
  metadata.reflection = DefaultOptionalValues_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AllocValues::_default_o_bytes_;
const ::std::string AllocValues::_default_a_string_;
const ::std::string AllocValues::_default_a_bytes_;
#ifndef _MSC_VER
const int AllocValues::kOBytesFieldNumber;
const int AllocValues::kRStringFieldNumber;
const int AllocValues::kAStringFieldNumber;
const int AllocValues::kABytesFieldNumber;
const int AllocValues::kAMessFieldNumber;
#endif  // !_MSC_VER

AllocValues::AllocValues() {
  SharedCtor();
}

void AllocValues::InitAsDefaultInstance() {
  a_mess_ = const_cast< ::foo::DefaultRequiredValues*>(&::foo::DefaultRequiredValues::default_instance());
}

AllocValues::AllocValues(const AllocValues& from) {
  SharedCtor();
  MergeFrom(from);
}

void AllocValues::SharedCtor() {
  _cached_size_ = 0;
  o_bytes_ = const_cast< ::std::string*>(&_default_o_bytes_);
  a_string_ = const_cast< ::std::string*>(&_default_a_string_);
  a_bytes_ = const_cast< ::std::string*>(&_default_a_bytes_);
  a_mess_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocValues::~AllocValues() {
  SharedDtor();
}

void AllocValues::SharedDtor() {
  if (o_bytes_ != &_default_o_bytes_) {
    delete o_bytes_;
  }
  if (a_string_ != &_default_a_string_) {
    delete a_string_;
  }
  if (a_bytes_ != &_default_a_bytes_) {
    delete a_bytes_;
  }
  if (this != default_instance_) {
    delete a_mess_;
  }
}

const ::google::protobuf::Descriptor* AllocValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocValues_descriptor_;
}

const AllocValues& AllocValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dfull_2eproto();  return *default_instance_;
}

AllocValues* AllocValues::default_instance_ = NULL;

AllocValues* AllocValues::New() const {
  return new AllocValues;
}

void AllocValues::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (o_bytes_ != &_default_o_bytes_) {
        o_bytes_->clear();
      }
    }
    if (_has_bit(2)) {
      if (a_string_ != &_default_a_string_) {
        a_string_->clear();
      }
    }
    if (_has_bit(3)) {
      if (a_bytes_ != &_default_a_bytes_) {
        a_bytes_->clear();
      }
    }
    if (_has_bit(4)) {
      if (a_mess_ != NULL) a_mess_->::foo::DefaultRequiredValues::Clear();
    }
  }
  r_string_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes o_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_o_bytes()));
        if (input->ExpectTag(18)) goto parse_r_string;
        break;
      }
      
      // repeated string r_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_r_string:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_r_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->r_string(0).data(), this->r_string(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_r_string;
        if (input->ExpectTag(26)) goto parse_a_string;
        break;
      }
      
      // required string a_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_a_string:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_a_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->a_string().data(), this->a_string().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_a_bytes;
        break;
      }
      
      // required bytes a_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_a_bytes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_a_bytes()));
        if (input->ExpectTag(42)) goto parse_a_mess;
        break;
      }
      
      // required .foo.DefaultRequiredValues a_mess = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_a_mess:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_a_mess()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllocValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AllocValues::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes o_bytes = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->o_bytes(), output);
  }
  
  // repeated string r_string = 2;
  for (int i = 0; i < this->r_string_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->r_string(i).data(), this->r_string(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->r_string(i), output);
  }
  
  // required string a_string = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->a_string().data(), this->a_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->a_string(), output);
  }
  
  // required bytes a_bytes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->a_bytes(), output);
  }
  
  // required .foo.DefaultRequiredValues a_mess = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->a_mess(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllocValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes o_bytes = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->o_bytes(), target);
  }
  
  // repeated string r_string = 2;
  for (int i = 0; i < this->r_string_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_string(i).data(), this->r_string(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->r_string(i), target);
  }
  
  // required string a_string = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->a_string().data(), this->a_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->a_string(), target);
  }
  
  // required bytes a_bytes = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->a_bytes(), target);
  }
  
  // required .foo.DefaultRequiredValues a_mess = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->a_mess(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllocValues::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes o_bytes = 1;
    if (has_o_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->o_bytes());
    }
    
    // required string a_string = 3;
    if (has_a_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a_string());
    }
    
    // required bytes a_bytes = 4;
    if (has_a_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->a_bytes());
    }
    
    // required .foo.DefaultRequiredValues a_mess = 5;
    if (has_a_mess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a_mess());
    }
    
  }
  // repeated string r_string = 2;
  total_size += 1 * this->r_string_size();
  for (int i = 0; i < this->r_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->r_string(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AllocValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocValues::MergeFrom(const AllocValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  r_string_.MergeFrom(from.r_string_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_o_bytes(from.o_bytes());
    }
    if (from._has_bit(2)) {
      set_a_string(from.a_string());
    }
    if (from._has_bit(3)) {
      set_a_bytes(from.a_bytes());
    }
    if (from._has_bit(4)) {
      mutable_a_mess()->::foo::DefaultRequiredValues::MergeFrom(from.a_mess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocValues::CopyFrom(const AllocValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocValues::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  
  if (has_a_mess()) {
    if (!this->a_mess().IsInitialized()) return false;
  }
  return true;
}

void AllocValues::Swap(AllocValues* other) {
  if (other != this) {
    std::swap(o_bytes_, other->o_bytes_);
    r_string_.Swap(&other->r_string_);
    std::swap(a_string_, other->a_string_);
    std::swap(a_bytes_, other->a_bytes_);
    std::swap(a_mess_, other->a_mess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocValues_descriptor_;
  metadata.reflection = AllocValues_reflection_;
  return metadata;
}


}  // namespace foo
